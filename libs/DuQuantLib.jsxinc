/*
	DuQuantLib
  Library to easily use a pngquant binary executable in After Effects
	Copyright (c) 2017 Nicolas Dufresne, Rainbox Productions
	https://rainboxprod.coop

	_Contributors:_
		Nicolas Dufresne - Lead developer

	_DuQuant makes use of:_

		• pngquant
		https://pngquant.org/ licensed under BSD by Kornel Lesiński and contributors.

	This file is part of DuAEF.

	DuAEF is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	DuAEF is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/

#include DuProcessLib.jsxinc

/**
 * Constructs a new PNGQuant instance
 * The constructor will try to find the pngquant binary in the same folder as DuQuant, or a (pngquant) subfolder, or in the scripts folder of After Effects.
 * If pngquant is not in one of those, the property pngquantPath will be an empty string, and it has to be set by the user.
 * @class PNGQuant
 * @classdesc A class used to easily compress png files using pngquant
 * @property {string}	  pngquantPath		- The path to the pngquant binary. Will try to auto find it if not set
 * @property {string}   suffix          - The suffix added to compressed files. Using an empty string will overwrite input files. Default: "_DuQuant".
 * @property {int}			quality					- range 0 (worst) to 100 (perfect), similar to JPEG. pngquant will use the least amount of colors required to meet or exceed the quality. Default: 85
 * @property {bool}     waitForFinished - Does the script have to wait for the process to end or start it in another thread and let it live its own life. default: true
 */
function PNGQuant(pngquantPath,suffix,quality,waitForFinished)
{
  //TODO include bin in jsx and extract if not found

  //detect os
	this.mac = $.os.toLowerCase().indexOf("mac") >= 0;
	this.win = !this.mac;

  if (waitForFinished === undefined) this.waitForFinished = false;
  else this.waitForFinished = true;

  if (quality === undefined) this.quality = 85;
  else this.quality = quality;

  if (suffix === undefined) this.suffix = "_DuQuant";
  else this.suffix = suffix;

	this.pngquantPath = '';

  //find pngquant
  var pngquantFile = new File(pngquantPath);
  var pngquantBinName = '';
  if (this.win) pngquantBinName = 'pngquant.exe';
  else pngquantBinName = 'pngquant';
  //first, in the same dir
  if (!pngquantFile.exists)
	{
	   pngquantFile = new File($.fileName.substring(0,$.fileName.lastIndexOf('/')) + '/' + pngquantBinName);
  }
	//in an (ffmpeg) subfolder
	if (!pngquantFile.exists)
	{
		pngquantFile = new File($.fileName.substring(0,$.fileName.lastIndexOf('/')) + '/(pngquant)/' + pngquantBinName);
	}
	//in AE Scripts folder
	if (!pngquantFile.exists)
	{
		pngquantFile = new File(Folder.appPackage.absoluteURI + '/Scripts/' + pngquantBinName);
	}
	//in AE Scripts/(ffmpeg) folder
	if (!pngquantFile.exists)
	{
		pngquantFile = new File(Folder.appPackage.absoluteURI + '/Scripts/(pngquant)/' + pngquantBinName);
	}
	//in AE ScriptUI Panels
	if (!pngquantFile.exists)
	{
		pngquantFile = new File(Folder.appPackage.absoluteURI + '/Scripts/ScriptUI Panels/' + pngquantBinName);
	}
	//in AE ScriptUI Panels/(ffmpeg)
	if (!pngquantFile.exists)
	{
		pngquantFile = new File(Folder.appPackage.absoluteURI + '/Scripts/ScriptUI Panels/(pngquant)/' + pngquantBinName);
	}

	this.setPngquantPath(pngquantFile.fsName);
}

/**
 * Launches compression on all files in a given folder
 * @memberof PNGQuant
 * @param {string}  path  - The path to the folder containing files
 */
PNGQuant.prototype.compressFolder = function (path)
{
	var folder = new Folder(path);
	//get PNG files in folder
	var pngs = folder.getFiles("*.png");
	if (pngs.length == 0) return;

	for (var i = 0 ; i < pngs.length ; i++)
	{
		var args = [];

		if (this.suffix != '')
		{
			args.push('--ext');
			args.push(this.suffix + '.png');
		}
		else
		{
			args.push('--ext=.png');
		}

		args.push('--quality');
		args.push('0-' + this.quality);

		args.push(pngs[i].fsName);

		this.process.start(args);
	}
}

/**
 * Sets the path to the pngquant binary executable
 * @memberof PNGQuant
 * @param {pngquantPath}  path  - The path to the pngquant binary executable
 */
PNGQuant.prototype.setPngquantPath = function (pngquantPath)
{
	var pngquantFile = new File(pngquantPath);

	if (pngquantFile.exists)
	{
		this.pngquantPath = pngquantFile.fsName;
		//create process
		var timeout = 0;
		if (this.waitForFinished) timeout = -1;
		var commonArgs = ['--force','--skip-if-larger'];
		this.process = new DuProcess(this.pngquantPath,commonArgs,timeout);
	}
}

/*
	DuBinaryLib
  Library to create/extract json representations of binary files
	Copyright (c) 2017 Nicolas Dufresne, Rainbox Productions
	https://rainboxprod.coop

	_Contributors:_
		Nicolas Dufresne - Lead developer

	This file is part of DuAEF.

	DuAEF is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	DuAEF is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * Tools to create/extract json or javascript string/object representations of binary files.
 * @namespace
 * @memberof DuAEF
 */
DuAEF.DuBinary = {};

/**
 * Creates a file from a DuBinaryFile object representation
 * @memberof DuAEF.DuBinary
 * @param {DuBinaryFile}	duBinaryFile  	- The DuBinaryFile object containing the string representation
 * @param {string}			[outputFileName=Folder.userData/DuAEF/category/binaryfilename]	- The output filename.
 * @return {File} The file created
 */
DuAEF.DuBinary.toFile = function(duBinaryFile,outputFileName)
{
	if (outputFileName === undefined) outputFileName = Folder.userData.absoluteURI + '/DuAEF/' + duBinaryFile.category + '/' + duBinaryFile.fileName;
	var file = new File(outputFileName);
	var fileContent = '';
	if (file.exists)
	{
		file.encoding = 'BINARY';
		if (file.open('r', 'TEXT', '????'))
		{
			fileContent = file.read();

			file.close();
		}
	}
	else
	{
		var folder = new Folder(file.path);
		if (!folder.exists)
		{
			folder.create();
		}
	}
	var success = fileContent == duBinaryFile.binAsString;
	if (!success)
	{
		file.encoding = 'BINARY';
		if (file.open('w'))
		{
			success = file.write(duBinaryFile.binAsString);
			file.close();
		}
	}
	return file;
}

/**
 * Creates a DuBinaryFile object from a binary file
 * @memberof DuAEF.DuBinary
 * @param {File}    file      - The File to convert
 * @param {string}  [category]  - A Category for the file, will be used as a subfolder to extract files. Can have subcategories like "category/subcategory".
 * @return {DuBinaryFile} The DuBinaryFile object containing the file as a string
 */
DuAEF.DuBinary.toObj = function(binaryFile,category)
{
  var content = '';

  binaryFile.encoding = "BINARY";
  if (binaryFile.open("r"))
  {
    content = binaryFile.read().toSource();
    content = content.substr(content.indexOf("\"")+1, content.length);
    content = content.substr(0, content.lastIndexOf("\""));
    binaryFile.close();
  }

  var obj = new DuBinaryFile(content,binaryFile.name,category);

  return obj;
}

/**
 * Converts a binary file to a jsxinc file
 * @memberof DuAEF.DuBinary
 * @param {File}    binaryFile      - The binary file to convert
 * @param {string}  [category]        - A Category for the file, will be used as a subfolder to extract files. Can have subcategories like "category/subcategory". Default: ""
 * @param {string}  [outputFileName=Same folder, same name with .json extension]  - The file name for the output.
 * @param {string}	[varName=File name without extension]	- The name of the variable used to store the javascript object.
 * @return {File} The json file created
 */
DuAEF.DuBinary.convertToIncludeFile = function(binaryFile,category,outputFileName,varName)
{
	if (outputFileName === undefined) outputFileName = binaryFile.absoluteURI + '.jsxinc';
	if (varName === undefined) varName = binaryFile.name.replace(/\..+/,'');
	varName = DuJS.string.replace(varName,'%20','_');
	var duBinary = this.toObj(binaryFile,category);
	var jsString = 'var ' + varName + ' = ';
	jsString += '{"binAsString":"' + duBinary.binAsString + '","fileName":"' + duBinary.fileName + '","category":"' + duBinary.category + '"}'
	jsString += ';\r\n';
	jsString += varName + ';';
	var outputFile = new File(outputFileName);
	outputFile.encoding = 'UTF8';
	if (outputFile.open("w", "TEXT", "????"))
	{
		outputFile.write(jsString);
		outputFile.close();
	}
}

/**
 * Converts a JS file to a binary file
 * @memberof DuAEF.DuBinary
 * @param {File}    jsFile        - The JS file to convert
 * @param {string}	[outputFileName=Folder.userData/DuAEF/category/binaryfilename]	- The output filename.
 * @return {File} The binary file created, or null if failed
 */
DuAEF.DuBinary.convertToBinaryFile = function(jsFile,outputFileName)
{
	//TODO parse instead of eval
	var obj = $.eval(jsFile);
	return this.toFile(obj);
}

/**
 * Constructs a new string representation of a file
 * @class DuBinaryFile
 * @classdesc Represents a binary file as a string and a filename.
 * @param	{string}	binAsString			- The string representation.
 * @param	{string}	fileName			- The name of the original file.
 * @param	{string}	[category]			- A Category for the file, will be used as a subfolder to extract files. Can have subcategories like "category/subcategory".
 * @property {string}	binAsString	   - The string representation.
 * @property {string}	fileName  	   - The name of the original file
 * @property {string}	category       - A Category for the file, will be used as a subfolder to extract files. Can have subcategories like "category/subcategory".
 */
function DuBinaryFile(binAsString,fileName,category)
{
	this.binAsString = binAsString;
	fileName = DuJS.string.replace(fileName,'%20','_');
	this.fileName = fileName;
	if (category === undefined) category = '';
	this.category = category;
}

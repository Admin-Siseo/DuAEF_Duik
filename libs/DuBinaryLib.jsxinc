/*
	DuBinaryLib
  Library to create/extract json representations of binary files
	Copyright (c) 2017 Nicolas Dufresne, Rainbox Productions
	https://rainboxprod.coop

	_Contributors:_
		Nicolas Dufresne - Lead developer

	This file is part of DuAEF.

	DuAEF is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	DuAEF is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/

/**
* Tools to include and extract binary files directly in your script files, allowing to deploy only one .jsx files containing any needed image, preset or executable.
*
* You can easily convert binaries to text (*.jsxinc) files using the {@link https://github.com/Rainbox-dev/DuAEF/tree/master/tools|tools provided with DuAEF}. You can then include those *.jsxinc files inside your scripts, and use the {@link DuAEF.DuBinary.toFile|toFile()} method to extract and use them at runtime.
* @namespace
* @memberof DuAEF
* @example
* //First, include the text representation of the file (Add a # before the include word)
* include icon.png.jsxinc
* // Now, a variable called `icon` (the original file name without extension) is available, you can pass this object to the `DuBinary.toFile()` method to extract it and get an ExtendScript File object representation of it.
* // Note: This object is an instance of a `DuBinaryFile` class, which contains all information and a string representation of the original binary file
* var iconFile = DuBinary.toFile(icon);
* iconFile.fsName; // C:\users\duduf\appData\Roaming\DuAEF\icon.png (Example on Windows)
* //You can also directly use a PNG string in ScriptUI without extracting the file. (Add a # before the include word)
* var button = somePanel.add('iconbutton',undefined,icon.binAsString);
*/
DuAEF.DuBinary = {};

/**
 * Creates a file from a DuBinaryFile object representation
 * @memberof DuAEF.DuBinary
 * @param {DuBinaryFile}	duBinaryFile  	- The DuBinaryFile object containing the string representation
 * @param {string}			[outputFileName=Folder.userData/DuAEF/category/binaryfilename]	- The output filename.
 * @return {File} The file created
 * @example
 * //First, include the text representation of the file (Add a # before the include word)
 * include executable.exe.jsxinc
 * // Now, a variable called `executable` (the original file name without extension) is available, you can pass this object to the `DuBinary.toFile()` method to extract it and get an ExtendScript File object representation of it.
 * // Note: This object is an instance of a `DuBinaryFile` class, which contains all information and a string representation of the original binary file
 * var execFile = DuBinary.toFile(executable);
 * //Now, the file exists in the file system, and execFile is an ExtendScript File object.
 * // The `DuBinary.toFile()` method extracts the file to the Application Data folder by default.
 * execFile.fsName; // C:\users\duduf\appData\Roaming\DuAEF\icon.png (Example on Windows)
 * @example
 * //You can specify the output file name. (Add a # before the include word)
 * include preset.ffx.jsxinc
 * var presetFile = DuBinary.toFile(preset,"C:/test/test_preset.ffx");
 * presetFile.fsName; // C:\test\test_preset.exe");
 */
DuAEF.DuBinary.toFile = function(duBinaryFile,outputFileName)
{
	if (outputFileName === undefined) outputFileName = Folder.userData.absoluteURI + '/DuAEF/' + duBinaryFile.category + '/' + duBinaryFile.fileName;
	var file = new File(outputFileName);
	var fileContent = '';
	if (file.exists)
	{
		file.encoding = 'BINARY';
		if (file.open('r', 'TEXT', '????'))
		{
			fileContent = file.read();

			file.close();
		}
	}
	else
	{
		var folder = new Folder(file.path);
		if (!folder.exists)
		{
			folder.create();
		}
	}
	var success = fileContent == duBinaryFile.binAsString;
	if (!success)
	{
		file.encoding = 'BINARY';
		if (file.open('w'))
		{
			success = file.write(duBinaryFile.binAsString);
			file.close();
		}
	}
	return file;
}

/**
 * Creates a DuBinaryFile object from a binary file
 * @memberof DuAEF.DuBinary
 * @param {File}    file      - The File to convert
 * @param {string}  [category]  - A Category for the file, will be used as a subfolder to extract files. Can have subcategories like "category/subcategory".
 * @return {DuBinaryFile} The DuBinaryFile object containing the file as a string
 */
DuAEF.DuBinary.toObj = function(binaryFile,category)
{
  var content = '';

  binaryFile.encoding = "BINARY";
  if (binaryFile.open("r"))
  {
    content = binaryFile.read().toSource();
    content = content.substr(content.indexOf("\"")+1, content.length);
    content = content.substr(0, content.lastIndexOf("\""));
    binaryFile.close();
  }

  var obj = new DuBinaryFile(content,binaryFile.name,category);

  return obj;
}

/**
 * Converts a binary file to a jsxinc file
 * @memberof DuAEF.DuBinary
 * @param {File}    binaryFile      - The binary file to convert
 * @param {string}  [category]        - A Category for the file, will be used as a subfolder to extract files. Can have subcategories like "category/subcategory". Default: ""
 * @param {string}  [outputFileName=Same folder, same name with .json extension]  - The file name for the output.
 * @param {string}	[varName=File name without extension]	- The name of the variable used to store the javascript object.
 * @return {File} The json file created
 */
DuAEF.DuBinary.convertToIncludeFile = function(binaryFile,category,outputFileName,varName)
{
	if (outputFileName === undefined) outputFileName = binaryFile.absoluteURI + '.jsxinc';
	if (varName === undefined) varName = binaryFile.name.replace(/\..+/,'');
	varName = DuAEF.DuJS.String.replace(varName,'%20','_');
	var duBinary = this.toObj(binaryFile,category);
	var jsString = 'var ' + varName + ' = ';
	jsString += '{"binAsString":"' + duBinary.binAsString + '","fileName":"' + duBinary.fileName + '","category":"' + duBinary.category + '"}'
	jsString += ';\r\n';
	jsString += varName + ';\r\n';
	var outputFile = new File(outputFileName);
	outputFile.encoding = 'UTF8';
	if (outputFile.open("w", "TEXT", "????"))
	{
		outputFile.write(jsString);
		outputFile.close();
	}
}

/**
 * Converts a JS file to a binary file
 * @memberof DuAEF.DuBinary
 * @param {File}    jsFile        - The JS file to convert
 * @param {string}	[outputFileName=Folder.userData/DuAEF/category/binaryfilename]	- The output filename.
 * @return {File} The binary file created, or null if failed
 * @example
 * //If you don't want to include the file in the script. (Add a # before the include word)
 * var stringFile = new File("C:\test\image.jpg.jsxinc");
 * var jpgFile = DuBinary.convertToBinaryFile(stringFile);
 * // Warning, this method uses `$.eval()` which is a bad security issue.
 * //This will be changed in the future, but for now, do not use this method for anything else than debugging and testing.
 * @todo Do not use $.eval() but parse the file.
 */
DuAEF.DuBinary.convertToBinaryFile = function(jsFile,outputFileName)
{
	//TODO parse instead of eval
	var obj = $.eval(jsFile);
	return this.toFile(obj);
}

/**
* 
* https://regexr.com/3ia38
* ([\"\'])(([A-Za-z]\:?|\~)?(\/|\\\\))?([A-Za-z0-9\-\_\.]+(\/|\\\\))*([A-Za-z0-9\-\_]+\.[A-Za-z0-9]+)\1
*/
DuAEF.DuBinary.parseFilePaths = function(filePath)
{
    var paths = [];

   var re = /([\"\'])(\~|.\:)?[a-z0-9\-\_\\\/\.]+\.[A-Za-z0-9]+\1/gi;
   
    var file = new File(filePath);
    if(!file.open("r")) return 1; // Unable to open the file

    // Line by line reading
    while(!file.eof )
    {
          var line = file.readln();
          paths = paths.concat(line.match(re));                   
    }

    file.close();
    
    return paths;
}

/**
 * Constructs a new string representation of a file
 * @class DuBinaryFile
 * @classdesc Represents a binary file as a string and a filename.
 * @param	{string}	binAsString			- The string representation.
 * @param	{string}	fileName			- The name of the original file.
 * @param	{string}	[category]			- A Category for the file, will be used as a subfolder to extract files. Can have subcategories like "category/subcategory".
 * @property {string}	binAsString	   - The string representation.
 * @property {string}	fileName  	   - The name of the original file
 * @property {string}	category       - A Category for the file, will be used as a subfolder to extract files. Can have subcategories like "category/subcategory".
 */
function DuBinaryFile(binAsString,fileName,category)
{
	this.binAsString = binAsString;
	fileName = DuAEF.DuJS.String.replace(fileName,'%20','_');
	this.fileName = fileName;
	if (category === undefined) category = '';
	this.category = category;
}

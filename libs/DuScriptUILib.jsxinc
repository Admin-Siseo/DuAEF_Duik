/*
DuScriptUILib
Library with ScriptUI tools.
Copyright (c) 2017 Nicolas Dufresne, Rainbox Productions
https://rainboxprod.coop

_Contributors:_
Nicolas Dufresne - Lead developer

This file is part of DuAEF.

DuAEF is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

DuAEF is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/

/**
* ScriptUI tools
* @namespace
* @memberof DuAEF
*/
DuAEF.DuScriptUI = {};

/**
 * An image button
 * @typedef {Object} ImageButton
 * @property {string} standardImage - The path to the image (or a PNG as a string representation)
 * @property {string} imageOver - The path to the image (or a PNG as a string representation) to display when mouseover
 * @property {function} onClick - The function to execute on mouse click
 * @property {ScriptUIImage}	image	- The scriptui object representing the image
 * @property {StaticText}	label	- The label
 * @property {Group}	group 	- The group containing the image and the label
 */

/**
* An image checkbox
* @typedef {Object} ImageCheckBox
* @property {string} standardImage - The path to the image (or a PNG as a string representation)
* @property {string} imageOver - The path to the image (or a PNG as a string representation) to display when mouseover
* @property {string} imageChecked - The path to the image (or a PNG as a string representation) to display when the button is checked
* @property {function} onClick - The function to execute on mouse click
* @property {ScriptUIImage}	image	- The scriptui object representing the image
* @property {StaticText}	label	- The label
* @property {Group}	group 	- The group containing the image and the label
* @property {boolean}	checked 	- The checked state of the button
*/

/**
* A form
* @typedef {Object} Form
* @property {Group} labels - The left vertical group
* @property {Group} buttons - The right vertical group
*/

/**
* A nice Edit Text
* @typedef {Object} NiceEditText
* @property {string} text - The text displayed
* @property {event} onActivate - Function to execute when activated
* @property {event} onDeactivate - Function to execute when deactivated
* @property {event} onChange - Function to execute when text changed
* @property {method} setText - Call this method to change the text
*/

//initilization
(function ()
{
	/**
	* The default alignment of children of containers with "column" orientation
	* @memberof DuAEF.DuScriptUI
	* @type {String[]}
	* @default ["fill","top"]
	*/
	DuAEF.DuScriptUI.defaultColumnAlignment = ["fill","top"];
	/**
	* The default alignment of children of containers with "row" orientation
	* @memberof DuAEF.DuScriptUI
	* @type {String[]}
	* @default ["left","center"]
	*/
	DuAEF.DuScriptUI.defaultRowAlignment = ["left","center"];
	/**
	* The default alignment of children of containers with "stack" orientation
	* @memberof DuAEF.DuScriptUI
	* @type {String[]}
	* @default ["fill","top"]
	*/
	DuAEF.DuScriptUI.defaultStackAlignment = ["fill","top"];
	/**
	* The default spacing of containers
	* @memberof DuAEF.DuScriptUI
	* @type {int}
	* @default 2
	*/
	DuAEF.DuScriptUI.defaultSpacing = 2;
	/**
	* The default mqrgins of containers
	* @memberof DuAEF.DuScriptUI
	* @type {int}
	* @default 2
	*/
	DuAEF.DuScriptUI.defaultMargins = 2;
})();

/**
 * Changes the color of the text of a ScriptUI Object
 * @memberof DuAEF.DuScriptUI
 * @param {ScriptUI}		text	- The ScriptUI Object
 * @param {Array}				color	- The new color [R,V,B,A] Array
 */
DuAEF.DuScriptUI.setTextColor = function (text,color)
{
	if (!text) throw "You must provide a ScriptUI Control to change the color of the text";
	var g = text.graphics;
	var textPen = g.newPen(g.PenType.SOLID_COLOR,color,1);
	g.foregroundColor = textPen;
}

/**
 * Creates the main panel of a script
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|null}		container	- The container ('this' in the root of the calling script), either a Panel (when launched from the 'Window' menu) or null (when launched from 'file/scripts/run...')
 * @param {string}	scriptName	- A name for this UI
 * @return {Panel|Window}	The panel created, either a ScriptUI Panel or a ScriptUI Window
 */
DuAEF.DuScriptUI.createUI = function (container, scriptName)
{
	if (!scriptName) scriptName = '';

	var  myPal = null;
	container instanceof Panel ? myPal = container : myPal = new Window('palette',scriptName,undefined, {resizeable:true});

	if (myPal == null) throw "Failed to create User Interface.";

	// Margins and alignment
	myPal.margins = DuAEF.DuScriptUI.defaultMargins;
	myPal.spacing = DuAEF.DuScriptUI.defaultSpacing;
	myPal.alignChildren = DuAEF.DuScriptUI.defaultColumnAlignment;
	myPal.orientation = "column";

	return myPal;
}

/**
 * Resizes and shows the main panel of a script
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window}		ui	- The UI created by Duik.ui.createUI
 */
DuAEF.DuScriptUI.showUI = function (ui)
{
	ui.layout.layout(true);
	ui.layout.resize();
	ui.onResizing = ui.onResize = function () {this.layout.resize();}

	// If it's a Window, it needs to be shown
	if (ui instanceof Window) {
		//ui.center();
		ui.show();
	}
}

/**
 * Adds a group in a container, using  DuAEF.DuScriptUI default alignments, and DuAEF.DuScriptUI.defaultSpacing. Margins are set to 0.
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window|Group}		container	- Where to create the group
 * @param {string}					[orientation] - The orientation to use. One of "column", "row" or "stack". By default, "column" if added in a row, "row" if added in a column.
 * @return {Group}	The group created
 */
DuAEF.DuScriptUI.addGroup = function (container,orientation)
{
	var group = container.add("group");
	group.spacing = 2;
	group.margins = 0;
	if (orientation !== undefined) group.orientation = orientation;
	if(group.orientation === "row")
	{
		group.alignChildren = DuAEF.DuScriptUI.defaultRowAlignment;
	}
	else if (group.orientation === "column")
	{
		group.alignChildren = DuAEF.DuScriptUI.defaultColumnAlignment;
	}
	else
	{
		group.alignChildren = DuAEF.DuScriptUI.defaultStackAlignment;
	}

	return group;
}

/**
 * Adds separator with an optionnal name in the group
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window|Group}		container	- Where to create the separator
 * @param {string}					[name] - The name displayed
 */
DuAEF.DuScriptUI.addSeparator = function (container,name)
{
	if (name == undefined) name = "";
	var group = DuAEF.DuScriptUI.addGroup(container,"row");
	group.margins = DuAEF.DuScriptUI.defaultMargins;
	if (name.length > 0)
	{
		var textName = group.add('statictext',undefined,name);
		textName.alignment = ['left','fill'];
	}
	var separator1 = group.add('panel',undefined);
	separator1.alignment = ['fill','center'];
	separator1.height = 0;
}

/**
 * Creates a button with an optionnal icon. Must have at least an icon or a text, or both.
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window|Group}			container	- The ScriptUI Object which will contain and display the button.
 * @param {string}					text		- The label of the button. Default: empty string
 * @param {string}					image		- The path to the icon. Default: empty string
 * @param {string}					helpTip		- The helptip. Default: empty string
 * @param {string}					imageOver	- The path to an icon displayed when the mouse is over the button. Default: empty string
 * @param {bool}					debug		- If true, the errors will be thrown instead of being catched. The default is false to work around a bug in the AE JavaScript Debugger. Default: false
 * @return {ImageButton}			The image button created.
 */
DuAEF.DuScriptUI.addImageButton = function (container,text,image,helpTip,imageOver,debug)
{
	if (!text) text = '';
	if (!image) image = '';
	if (!helpTip) helpTip = '';
	if (!imageOver) imageOver = '';
	if (debug == undefined) debug = false;

	if (text == '' && image == '') throw "You must provide either a text or an icon to create the button";

	var imageButton = {};

	imageButton.standardImage = image;
	imageButton.imageOver = imageOver;
	imageButton.onClick = function(){};
	imageButton.image = null;
	imageButton.label = null;
	imageButton.debug = debug;

	//create a group
	var group = container.add('group');
	group.orientation = 'row';
	group.margins = 0;
	group.spacing = 5;
	imageButton.group = group;

	if (image != '')
	{
		var icon = group.add('image',undefined,image);
		icon.alignment = ['center','center'];
		icon.helpTip = helpTip;
		imageButton.image = icon;
	}

	if (text != '')
	{
		var label = group.add('statictext',undefined,text);
		label.helpTip = helpTip;
		label.alignment = ['left','center'];
		imageButton.label = label;
	}

	//events
	imageButton.clicked = function (e)
	{
		try { imageButton.onClick(); } catch (e) { if (imageButton.debug) alert('An error has occured in file\n' + $.fileName + '\nat line ' + e.line + '\n\n' + e.description); }
	}

	imageButton.mouseOver = function (e)
	{
		if (icon) if (imageButton.imageOver != '') icon.image = imageButton.imageOver;
		if (label) DuAEF.DuScriptUI.setTextColor(imageButton.label,DuAEF.DuJS.Color.Colors.RAINBOX_RED);
	}

	imageButton.mouseOut = function (e)
	{
		if (icon) if (imageButton.standardImage != '') icon.image = imageButton.standardImage;
		if (label) DuAEF.DuScriptUI.setTextColor(imageButton.label,DuAEF.DuJS.Color.Colors.LIGHT_GREY);
	}

	//add events
	group.addEventListener("mousedown",imageButton.clicked,true);
	// Hack - CS6 Bug on mouseover with images
	if (DuAEF.DuAE.App.version >= 11 && DuAEF.DuAE.App.version < 12)
	{
		if (label) imageButton.label.addEventListener("mouseover",imageButton.mouseOver);
		if (label) imageButton.label.addEventListener("mouseout",imageButton.mouseOut);
	}
	else
	{
		group.addEventListener("mouseover",imageButton.mouseOver);
		group.addEventListener("mouseout",imageButton.mouseOut);
	}


	return imageButton;
}

/**
 * Creates a checkbox with an optionnal icon. Must have at least an icon or a text, or both.
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window|Group}			container		- The ScriptUI Object which will contain and display the button.
 * @param {string}					text			- The label of the button. Default: empty string
 * @param {string}					image			- The path to the icon. Default: empty string
 * @param {string}					helpTip			- The helptip. Default: empty string
 * @param {string}					imageChecked	- The path to an icon displayed when the button is checked. Default: empty string
 * @param {string}					imageOver		- The path to an icon displayed when the mouse is over the button. Default: same as imageChecked
 * @param {bool}						debug			- If true, the errors will be thrown instead of being catched. The default is false to work around a bug in the AE JavaScript Debugger. Default: false
 * @return {ImageCheckBox}					The image checkbox created.
 */
DuAEF.DuScriptUI.addImageCheckBox = function (container,text,image,helpTip,imageChecked,imageOver,debug)
{
	if (!container) return null;
	if (!text) text = '';
	if (!image) image = '';
	if (!helpTip) helpTip = '';
	if (!imageChecked) imageChecked = '';
	if (!imageOver) imageOver = imageChecked;

	if (text == '' && image == '') throw "You must provide either a text or an icon to create the checkbox";

	var imageButton = {};

	imageButton.standardImage = image;
	imageButton.imageOver = imageOver;
	imageButton.imageChecked = imageChecked;
	imageButton.onClick = function () {};
	imageButton.checked = imageButton.value = false;

	var group = container.add('group');
	group.orientation = 'row';
	group.margins = 0;
	group.spacing =5;
	imageButton.group = group;

	if (image != '')
	{
		var icon = group.add('image',undefined,image);
		icon.alignment = ['center','center'];
		icon.helpTip = helpTip;
		imageButton.image = icon;
	}

	if (text != '')
	{
		if (image != '')
		{
			var label = group.add('statictext',undefined,text);
			label.helpTip = helpTip;
			label.alignment = ['center','center'];
			imageButton.label = label;
		}
		else
		{
			var label = group.add('checkbox',undefined,text);
			label.helpTip = helpTip;
			label.alignment = ['center','center'];
			imageButton.label = label;
			imageButton.box = true;
		}

	}

	/**
	* Checks or unchecks the button
	* @memberof ImageCheckBox
	* @param {boolean} c	- The checked state
	*/
	imageButton.setChecked = function (c)
	{
		imageButton.checked = imageButton.value = c;
		if (imageButton.imageChecked != '')
		{
			if (imageButton.checked)
			{
				if (icon) if (imageButton.imageChecked != '') icon.image = imageButton.imageChecked;
				if (label) DuAEF.DuScriptUI.setTextColor(imageButton.label,DuAEF.DuJS.Color.Colors.RAINBOX_RED);
			}
			else
			{
				if (icon) if (imageButton.standardImage != '') icon.image = imageButton.standardImage;
				if (label) DuAEF.DuScriptUI.setTextColor(imageButton.label,DuAEF.DuJS.Color.Colors.LIGHT_GREY);
			}
		}
	}

	imageButton.clicked = function (e)
	{
		imageButton.setChecked(!imageButton.checked);
		try { imageButton.onClick(); } catch (e) { if (debug) alert('An error has occured at line ' + e.line + '\n\n' + e.description); }
	}

	imageButton.mouseOver = function (e)
	{
		if (icon) if (imageButton.imageOver != '') icon.image = imageButton.imageOver;
		if (label) DuAEF.DuScriptUI.setTextColor(imageButton.label,DuAEF.DuJS.Color.Colors.RAINBOX_RED);
	}

	imageButton.mouseOut = function (e)
	{
		if (imageButton.checked)
		{
			if (icon) if (imageButton.imageChecked != '') icon.image = imageButton.imageChecked;
			if (label) DuAEF.DuScriptUI.setTextColor(imageButton.label,DuAEF.DuJS.Color.Colors.RAINBOX_RED);
		}
		else
		{
			if (icon) if (imageButton.standardImage != '') icon.image = imageButton.standardImage;
			if (label) DuAEF.DuScriptUI.setTextColor(imageButton.label,DuAEF.DuJS.Color.Colors.LIGHT_GREY);
		}
	}

	imageButton.group.addEventListener("mousedown",imageButton.clicked,true);
	// Hack - CS6 Bug on mouseover with images
	if (DuAEF.DuAE.App.version >= 11 && DuAEF.DuAE.App.version < 12)
	{
		if (label) imageButton.label.addEventListener("mouseover",imageButton.mouseOver);
		if (label) imageButton.label.addEventListener("mouseout",imageButton.mouseOut);
	}
	else
	{
		imageButton.group.addEventListener("mouseover",imageButton.mouseOver);
		imageButton.group.addEventListener("mouseout",imageButton.mouseOut);
	}

	return imageButton;
}

/**
 * Creates a layout to add forms to a UI, using ScriptUI groups.<br />
 * The object returned is a custom group with two attributes:<br />
 * form.labels is a vertical group on the left<br />
 * form.buttons is a vertical group on the right<br />
 * You can easily add controls/fields to this form using Duik.ui.addFormField
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group}	container		- The ScriptUI Object which will contain and display the form.
 * @return {Form}		The custom Group containing the form.
 */
DuAEF.DuScriptUI.addForm = function (container)
{
	var mainGroup = container.add('group');
	mainGroup.orientation = 'row';
	mainGroup.margins = 0;
	mainGroup.spacing = DuAEF.DuScriptUI.defaultSpacing;

	var labelsGroup = mainGroup.add('group');
	labelsGroup.alignment = ['left','top'];
	labelsGroup.orientation = 'column';
	labelsGroup.alignChildren = ['left','bottom'];
	labelsGroup.spacing = DuAEF.DuScriptUI.defaultSpacing;

	var buttonsGroup = mainGroup.add('group');
	buttonsGroup.alignment = ['fill','top'];
	buttonsGroup.orientation = 'column';
	buttonsGroup.alignChildren = ['fill','fill'];
	buttonsGroup.spacing = DuAEF.DuScriptUI.defaultSpacing;

	mainGroup.labels = labelsGroup;
	mainGroup.buttons = buttonsGroup;

	return mainGroup;
}

/**
 * Adds a field to a form
 * example: Duik.ui.addFormField(form,'Composition:','dropdownlist',['Composition1','Composition2'],'Select a composition')
 * @memberof Duik.ui
 * @param {Form}			form		- A custom ScriptUI group as returned by DuAEF.DuScriptUI.addForm
 * @param {string}			label		- The label text.
 * @param {string}			type		- The type of ScriptUI object to add (like 'button','edittext', etc.).
 * @param {object}			[value]		- The default value or content of the field added, depends on the type.
 * @param {string}			[helpTip]		- The helpTip of the form control.
 * @return {ScriptUI[]}		An array with at 0 the StaticText label, and at 1 the ScriptUI object of the type type, added to the form
 */
DuAEF.DuScriptUI.addFormField = function (form,label,type,value,helpTip)
{
	if (helpTip == undefined) helpTip = '';
	var control = null;
	var height = 20;
	if (type == "ImageButton")
	{
		alert(value[0]);
		alert(value[1]);
		control = DuAEF.DuScriptUI.addImageButton(form.buttons,'',value[0],helpTip,value[1]);
		height = control.image.preferredSize[1];
	}
	else
	{
		control = form.buttons.add(type,undefined,value);
		control.helpTip = helpTip;
		height = control.preferredSize[1];
	}

	var l = form.labels.add('statictext',undefined,label);
	l.helpTip = helpTip;

	l.minimumSize.height = l.maximumSize.height = height;
	return [l,control];
}

/**
 * Creates a nice edittext where the edit box is shown only on click.
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group}	container		- The ScriptUI Object which will contain and display the form.
 * @return {NiceEditText}	The custom Group containing the edit text.
 * @todo implement helpTip
 */
DuAEF.DuScriptUI.addNiceEditText = function(container,text)
{
	var niceEditText = container.add('group');
	niceEditText.orientation = 'stack';
	niceEditText.margins = 0;
	niceEditText.alignChildren = ['fill','fill'];
	niceEditText.static = niceEditText.add('statictext',undefined,text);
	niceEditText.static.alignment = ['fill','center'];
	DuAEF.DuScriptUI.setTextColor(niceEditText.static,DuAEF.DuJS.Color.Colors.AFTER_EFFECTS_BLUE);
	niceEditText.edit = niceEditText.add('edittext',undefined,text);
	niceEditText.edit.visible = false;

	niceEditText.text = text;
	niceEditText.editing = false;

	niceEditText.onActivate = function(){};
	niceEditText.onDeactivate = function(){};
	niceEditText.onChange = function(){};

	niceEditText.clicked = function()
	{
		if (niceEditText.editing) return;
		else
		{
			niceEditText.static.visible = false;
			niceEditText.edit.visible = true;
			niceEditText.editing = true;
			niceEditText.edit.active = true;
		}
	}

	niceEditText.changed = function()
	{
		niceEditText.editing = false;
		niceEditText.static.text = niceEditText.edit.text;
		niceEditText.text = niceEditText.edit.text ;
		niceEditText.edit.visible = false;
		niceEditText.static.visible = true;
		niceEditText.edit.active = false;
		niceEditText.onChange();
	}

	niceEditText.setText = function (text)
	{
		niceEditText.static.text = niceEditText.edit.text = niceEditText.text = text;
	}


	niceEditText.edit.onActivate = function()
	{
		niceEditText.onActivate();
	}
	niceEditText.edit.onDeactivate = function ()
	{
		niceEditText.changed();
		niceEditText.onDeactivate();
	}
	niceEditText.edit.onChange = niceEditText.changed;
	niceEditText.addEventListener("mousedown",niceEditText.clicked,true);

	return niceEditText;
}

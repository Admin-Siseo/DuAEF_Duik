/*
	DuJSLib
  Library javascript tools
	Copyright (c) 2017 Nicolas Dufresne, Rainbox Productions
	https://rainboxprod.coop

	_Contributors:_
		Nicolas Dufresne - Lead developer

	This file is part of DuAEF.

	DuAEF is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	DuAEF is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * Constructs a new DuJS.
 * @class DuJS
 * @classdesc Useful JavaScript tools
 */
var DuJS = {};

/**
 * JavaScript File System related methods
 */
DuJS.fs = {};

/**
 * Recursively gets all files in a folder using a name filter
 * Returns an array of File objects.
 * @param {Folder}	folder	- The Folder
 * @param {any}	filter	- Optionnal. A search mask for file names, specified as a string or a function.
 * A mask string can contain question mark (?) and asterisk (*) wild cards. Default is "*", which matches all file names.
 * Can also be the name of a function that takes a File or Folder object as its argument. It is called for each file or folder found in the search; if it returns true, the object is added to the return array.
 * @return {Array}	The files found.
 */
DuJS.fs.getFilesInFolder = function (folder,filter)
{
	if (folder === undefined) return [];
	if (!(folder instanceof Folder)) return [];

	var files = folder.getFiles(filter);
	if (files === null) files = [];

	var folders = folder.getFiles(DuJS.fs.isFolder);

	for (var i = 0 ; i < folders.length ; i++)
	{
		files = files.concat(DuJS.fs.getFilesInFolder(folders[i],filter));
	}
	return files;
}

/**
 * Checks if an object is a Folder
 * @param {object}	file	- The object to check
 * @return {bool}	true if this object is an instance of Folder
 */
DuJS.fs.isFolder = function (file)
{
	return file instanceof Folder;
}

/**
 * JavaScript Regular Expression related methods
 */
DuJS.regExp = {};

/**
 * Escape reg exp reserved characters from a string to build a regular expression compatible string
 * @param {string}	string		- The string to escape
 * @return	{string}	The escaped string
 */
DuJS.regExp.escapeRegExp = function (string)
{
	return string.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
}

/**
 * JavaScript String related methods
 */
DuJS.string = {};

/**
 * Replaces all occurences of a substring by another and returns the new string.
 * @param {string}	string			- The original string
 * @param {string}	find			- The substring to replace
 * @param {string}	replace			- The new substring to insert
 * @param {bool}	caseSensitive	- Do a case sensitive search of substring
 * @return	{string}	The new string
 */
DuJS.string.replace = function (string, find, replace, caseSensitive)
{
		if (caseSensitive == undefined) caseSensitive = true;
		var re = new RegExp(DuJS.regExp.escapeRegExp(find),caseSensitive ? 'g' : 'gi');
		return string.replace(re, replace);
}

/*
DuJSLib
Library javascript tools
Copyright (c) 2017 Nicolas Dufresne, Rainbox Productions
https://rainboxprod.coop

_Contributors:_
Nicolas Dufresne - Lead developer

This file is part of DuAEF.

DuAEF is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

DuAEF is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/

/**
* Useful JavaScript tools
* @namespace
* @memberof DuAEF
*/
DuAEF.DuJS = {};

/**
* JavaScript Array related methods
* @namespace
* @memberof DuAEF.DuJS
*/
DuAEF.DuJS.Array = {};

/**
* Gets the first index of a value in an Array, or -1 if not found
* @memberof DuAEF.DuJS.Array
* @param {Array}	arr	- The array
* @param {*}	value	- The value to find. Must be compatible with the == operand
* @return {int}	The index of value, -1 if not found
*/
DuAEF.DuJS.Array.indexOf = function (arr,value)
{
	if (value == undefined) throw "Value can not be undefined";

	for (var i = 0;i<arr.length;i++)
	{
	if (arr[i] == value) return i;
	}
	return -1;
}

/**
* Checks if the array has duplicate values
* @memberof DuAEF.DuJS.Array
* @param {Array}	arr	- The array
* @return {boolean}	true if the array has duplicate values
*/
DuAEF.DuJS.Array.hasDuplicates = function (arr)
{
	for (var i = 0;i<arr.length-1;i++) {
	for (var j=i+1;j<arr.length;j++) {
	if (arr[i] === arr[j]) return true;
	}
	}
	return false;
}

/**
* Returns all duplicated values found in the array
* @memberof DuAEF.DuJS.Array
* @param {Array}	arr	- The array
* @return {Array}	The duplicated values
*/
DuAEF.DuJS.Array.getDuplicates = function (arr)
{
	var duplicates = [];
	for (var i = 0;i<arr.length-1;i++) {
	for (var j=i+1;j<arr.length;j++) {
	if (arr[i] === arr[j]) duplicates.push(arr[j]);
	}
	}
	DuAEF.DuJS.Array.removeDuplicates(duplicates);
	return duplicates;
}

/**
* Removes all duplicated values from the Array, and returns them
* @memberof DuAEF.DuJS.Array
* @param {Array}	arr	- The array
* @return {Array}	The duplicated (and removed) values
*/
DuAEF.DuJS.Array.removeDuplicates = function (arr)
{
	var removed = [];
	for (var i = 0;i<arr.length-1;i++) {
	for (var j=i+1;j<arr.length;j++) {
	if (arr[i] === arr[j]) {
	removed = removed.concat(arr.splice(j,1));
	}
	}
	}
	return removed;
}

/**
* JavaScript File System related methods
* @namespace
* @memberof DuAEF.DuJS
*/
DuAEF.DuJS.Fs = {};

/**
* Recursively gets all files in a folder using a name filter
* Returns an array of File objects.
* @memberof DuAEF.DuJS.Fs
* @param {Folder}	folder	- The Folder
* @param {string|function}	[filter=*]	- A search mask for file names, specified as a string or a function.
* A mask string can contain question mark (?) and asterisk (*) wild cards. Default is "*", which matches all file names.
* Can also be the name of a function that takes a File or Folder object as its argument. It is called for each file or folder found in the search; if it returns true, the object is added to the return array.
* @return {Array}	The files found.
*/
DuAEF.DuJS.Fs.getFilesInFolder = function (folder,filter)
{
	if (folder === undefined) return [];
	if (!(folder instanceof Folder)) return [];

	var files = folder.getFiles(filter);
	if (files === null) files = [];

	var folders = folder.getFiles(DuJS.fs.isFolder);

	for (var i = 0 ; i < folders.length ; i++)
	{
		files = files.concat(DuJS.fs.getFilesInFolder(folders[i],filter));
	}
	return files;
}

/**
* Checks if an object is a Folder
* @memberof DuAEF.DuJS.Fs
* @param {*}	file	- The object to check
* @return {boolean}	true if this object is an instance of Folder
*/
DuAEF.DuJS.Fs.isFolder = function (file)
{
	return file instanceof Folder;
}

/**
* JavaScript Math related methods
* @namespace
* @memberof DuAEF.DuJS
*/
DuAEF.DuJS.Math = {};

/**
* Generates a random integer between minimum and maximum
* @memberof DuAEF.DuJS.Math
* @param {int}	min	- The minimum value
* @param {int}	max	- The maximum value
* @return {int}	The randomly generated integer
*/
DuAEF.DuJS.Math.random = function (min, max)
{
	if (min == undefined) min = 0;
	if (max == undefined) max = 1;
	var rng = null;
	$.sleep(1);
	var date = new Date();
	var rng = new Math.seedrandom(date.getTime())();
	//rng = Math.random();

	if (!rng) return 0;
	return rng * (max - min) + min;
}

/**
* JavaScript Regular Expression related methods
* @namespace
* @memberof DuAEF.DuJS
*/
DuAEF.DuJS.RegExp = {};

/**
* Escape reg exp reserved characters from a string to build a regular expression compatible string
* @memberof DuAEF.DuJS.RegExp
* @param {string}	string		- The string to escape
* @return	{string}	The escaped string
*/
DuAEF.DuJS.RegExp.escapeRegExp = function (string)
{
	return string.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
}

/**
* JavaScript String related methods
* @namespace
* @memberof DuAEF.DuJS
*/
DuAEF.DuJS.String = {};

/**
* Replaces all occurences of a substring by another and returns the new string.
* @memberof DuAEF.DuJS.String
* @param {string}	string			- The original string
* @param {string}	find			- The substring to replace
* @param {string}	replace			- The new substring to insert
* @param {boolean}	[caseSensitive=true]	- Optionnal. Do a case sensitive search of substring.
* @return	{string}	The new string
*/
DuAEF.DuJS.String.replace = function (string, find, replace, caseSensitive)
{
	if (caseSensitive == undefined) caseSensitive = true;
	var re = new RegExp(DuAEF.DuJS.RegExp.escapeRegExp(find),caseSensitive ? 'g' : 'gi');
	return string.replace(re, replace);
}

/**
 * Checks if a string ends with a given suffix
 * @memberof DuAEF.DuJS.String
 * @param {string}	str 	The string to check
 * @param {string}	suffix	The suffix
 * @return {bool}	Wether the string ends with the given suffix or not
 */
DuAEF.DuJS.String.endsWith = function (str, suffix)
{
	return str.indexOf(suffix, str.length - suffix.length) !== -1;
}

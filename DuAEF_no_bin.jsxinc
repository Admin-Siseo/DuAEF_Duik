/**
 * To use the Duduf After Effects scripting framework, just include one of those three files in your script:<br />
 * - <code>DuAEF_fill.jsxinc</code> is the best option if you do not know what to choose. It will include the whole framework with all dependencies.<br />
 * - <code>DuAEF.jsxinc</code> will include all files independently, you'll have to keep all files inside lib/ and bin/ for it to work. This is a good option if you plan to make some changes to DuAEF.<br />
 * - <code>DuAEF_no_bin.jsxinc</code> will include everything but the binaries, this file is way lighter than the "full" version.<br />
 * - You can also rename one of these file to *.jsx and put it in the Scripts/Startup/ folder of After Effects to make the DuAEF object available for all your scripts without inclusion.<br />
 * @overview Duduf After Effects ExtendScript Framework.
 * @author Nicolas Dufresne
 * @copyright 2017 Nicolas Dufresne, Rainbox Productions
 * @version 0.0.2
 * @license GPL-3.0
 * DuAEF is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DuAEF is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DuAEF. If not, see {@link http://www.gnu.org/licenses/}.
 */


/**
* The general Duduf After Effects ExtendScript Framework namespace.<br />
* Provides some general tools and information.
* @namespace
* @example
* //The framework version is
* DuAEF.version; //Currently "0.0.1"
* //If you need to get the OS the script is running on
* DuAEF.mac; //true on mac
* DuAEF.win; //true on windows
*/
var DuAEF = {};
/**
* The Current DuAEF Version
* @memberof DuAEF
* @type {string}
*/
DuAEF.version = "0.0.2";

/**
* Includes binaries needed by some libraries, like pngquant for DuQuantLib or FFmpeg for DuFFmpegLib.<br />
* The binaries are available only if you include DuAEF.jsxinc or DuAEF_full.jsxinc.<br />
* If you use the DuAEF_no_bin.jsxinc version of DuAEF, this is an empty object.<br />
* @namespace
* @memberof DuAEF
*/
DuAEF.bin = {};

//Initializes DuAEF
(function ()
{
	//detect OS Version
	var mac = $.os.toLowerCase().indexOf("mac") >= 0;
	/**
	* The current OS, true if we're on Mac OS
	* @memberof DuAEF
	* @type {boolean}
	*/
	DuAEF.mac = mac;
	/**
	* The current OS, true if we're on Windows
	* @memberof DuAEF
	* @type {boolean}
	*/
	DuAEF.win = !mac;

	//the binaries
	/**
	* pngquant binary
	* @memberof DuAEF.bin
	* @type {DuBinaryFile}
	* @todo include pngquant for mac too
	*/
	DuAEF.bin.pngquant = null;
	/**
	* pngquantbatch binary
	* This is an older version of pngquant where the command 'pngquant *.png' works, but which is a bit slower and less efficient. The current version seems to be broken (on windows at least).
	* @memberof DuAEF.bin
	* @type {DuBinaryFile}
	* @todo include pngquantbatch for mac too
	*/
	DuAEF.bin.pngquantbatch = null
	//comment out this line to build DuAEF without binaries and make the file lighter
})();

/**
 * JSON parser.
 * @name JSON
 * @see {@link http://www.JSON.org/js.html|Json2}
 * @license Public-Domain
 */

if(typeof JSON!=="object"){JSON={};}
(function(){"use strict";var rx_one=/^[\],:{}\s]*$/;var rx_two=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;var rx_three=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;var rx_four=/(?:^|:|,)(?:\s*\[)+/g;var rx_escapable=/[\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;var rx_dangerous=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;function f(n){return n<10?"0"+n:n;}
function this_value(){return this.valueOf();}
if(typeof Date.prototype.toJSON!=="function"){Date.prototype.toJSON=function(){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+
f(this.getUTCMonth()+1)+"-"+
f(this.getUTCDate())+"T"+
f(this.getUTCHours())+":"+
f(this.getUTCMinutes())+":"+
f(this.getUTCSeconds())+"Z":null;};Boolean.prototype.toJSON=this_value;Number.prototype.toJSON=this_value;String.prototype.toJSON=this_value;}
var gap;var indent;var meta;var rep;function quote(string){rx_escapable.lastIndex=0;return rx_escapable.test(string)?"\""+string.replace(rx_escapable,function(a){var c=meta[a];return typeof c==="string"?c:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4);})+"\"":"\""+string+"\"";}
function str(key,holder){var i;var k;var v;var length;var mind=gap;var partial;var value=holder[key];if(value&&typeof value==="object"&&typeof value.toJSON==="function"){value=value.toJSON(key);}
if(typeof rep==="function"){value=rep.call(holder,key,value);}
switch(typeof value){case"string":return quote(value);case"number":return isFinite(value)?String(value):"null";case"boolean":case"null":return String(value);case"object":if(!value){return"null";}
gap+=indent;partial=[];if(Object.prototype.toString.apply(value)==="[object Array]"){length=value.length;for(i=0;i<length;i+=1){partial[i]=str(i,value)||"null";}
v=partial.length===0?"[]":gap?"[\n"+gap+partial.join(",\n"+gap)+"\n"+mind+"]":"["+partial.join(",")+"]";gap=mind;return v;}
if(rep&&typeof rep==="object"){length=rep.length;for(i=0;i<length;i+=1){if(typeof rep[i]==="string"){k=rep[i];v=str(k,value);if(v){partial.push(quote(k)+(gap?": ":":")+v);}}}}else{for(k in value){if(Object.prototype.hasOwnProperty.call(value,k)){v=str(k,value);if(v){partial.push(quote(k)+(gap?": ":":")+v);}}}}
v=partial.length===0?"{}":gap?"{\n"+gap+partial.join(",\n"+gap)+"\n"+mind+"}":"{"+partial.join(",")+"}";gap=mind;return v;}}
if(typeof JSON.stringify!=="function"){meta={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r","\"":"\\\"","\\":"\\\\"};JSON.stringify=function(value,replacer,space){var i;gap="";indent="";if(typeof space==="number"){for(i=0;i<space;i+=1){indent+=" ";}}else if(typeof space==="string"){indent=space;}
rep=replacer;if(replacer&&typeof replacer!=="function"&&(typeof replacer!=="object"||typeof replacer.length!=="number")){throw new Error("JSON.stringify");}
return str("",{"":value});};}
if(typeof JSON.parse!=="function"){JSON.parse=function(text,reviver){var j;function walk(holder,key){var k;var v;var value=holder[key];if(value&&typeof value==="object"){for(k in value){if(Object.prototype.hasOwnProperty.call(value,k)){v=walk(value,k);if(v!==undefined){value[k]=v;}else{delete value[k];}}}}
return reviver.call(holder,key,value);}
text=String(text);rx_dangerous.lastIndex=0;if(rx_dangerous.test(text)){text=text.replace(rx_dangerous,function(a){return"\\u"+
("0000"+a.charCodeAt(0).toString(16)).slice(-4);});}
if(rx_one.test(text.replace(rx_two,"@").replace(rx_three,"]").replace(rx_four,""))){j=eval("("+text+")");return(typeof reviver==="function")?walk({"":j},""):j;}
throw new SyntaxError("JSON.parse");};}}());
/**
 * Adds a new Math.seedRandom() method, used as a workaround for a bug in Math.random() with After Effects on Mac OS
 * @name seedRandom
 * @author David Bau
 * @copyright David Bau
 * @license MIT
 */

!function(a,b){function c(c,j,k){var n=[];j=1==j?{entropy:!0}:j||{};var s=g(f(j.entropy?[c,i(a)]:null==c?h():c,3),n),t=new d(n),u=function(){for(var a=t.g(m),b=p,c=0;q>a;)a=(a+c)*l,b*=l,c=t.g(1);for(;a>=r;)a/=2,b/=2,c>>>=1;return(a+c)/b};return u.int32=function(){return 0|t.g(4)},u.quick=function(){return t.g(4)/4294967296},u["double"]=u,g(i(t.S),a),(j.pass||k||function(a,c,d,f){return f&&(f.S&&e(f,t),a.state=function(){return e(t,{})}),d?(b[o]=a,c):a})(u,s,"global"in j?j.global:this==b,j.state)}function d(a){var b,c=a.length,d=this,e=0,f=d.i=d.j=0,g=d.S=[];for(c||(a=[c++]);l>e;)g[e]=e++;for(e=0;l>e;e++)g[e]=g[f=s&f+a[e%c]+(b=g[e])],g[f]=b;(d.g=function(a){for(var b,c=0,e=d.i,f=d.j,g=d.S;a--;)b=g[e=s&e+1],c=c*l+g[s&(g[e]=g[f=s&f+b])+(g[f]=b)];return d.i=e,d.j=f,c})(l)}function e(a,b){return b.i=a.i,b.j=a.j,b.S=a.S.slice(),b}function f(a,b){var c,d=[],e=typeof a;if(b&&"object"==e)for(c in a)try{d.push(f(a[c],b-1))}catch(g){}return d.length?d:"string"==e?a:a+"\0"}function g(a,b){for(var c,d=a+"",e=0;e<d.length;)b[s&e]=s&(c^=19*b[s&e])+d.charCodeAt(e++);return i(b)}function h(){try{if(j)return i(j.randomBytes(l));var b=new Uint8Array(l);return(k.crypto||k.msCrypto).getRandomValues(b),i(b)}catch(c){var d=k.navigator,e=d&&d.plugins;return[+new Date,k,e,k.screen,i(a)]}}function i(a){return String.fromCharCode.apply(0,a)}var j,k=this,l=256,m=6,n=52,o="random",p=b.pow(l,m),q=b.pow(2,n),r=2*q,s=l-1;if(b["seed"+o]=c,g(b.random(),a),"object"==typeof module&&module.exports){module.exports=c;try{j=require("crypto")}catch(t){}}else"function"==typeof define&&define.amd&&define(function(){return c})}([],Math);
/*
DuAECoreLib
Library with core After Effects tools. Contains the main class of Duduf AE Framework
Copyright (c) 2017 Nicolas Dufresne, Rainbox Productions
https://rainboxprod.coop

_Contributors:_
Nicolas Dufresne - Lead developer

This file is part of DuAEF.

DuAEF is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

DuAEF is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/

/**
* Constructs a new KeySpatialProperty
* @class KeySpatialProperties
* @classdesc Spatial properties of a {@linkcode KeyFrame}.
* @property {float[]|null}	  [inTangent=null]     - The incoming spatial tangent
* @property {float[]|null}    [outTangent=null]            -  The outgoing spatial tangent
* @property {boolean}      [_continuous=true]         - true if the specified keyframe has spatial continuity
* @property {boolean}	[_autoBezier=false]			- true if the specified keyframe has temporal auto-Bezier interpolation
* @property {boolean}	[_roving=false]	- true if the specified keyframe is roving
*/
function KeySpatialProperties (){
	this.inTangent = null;
	this.outTangent = null;
	this._continuous = true;
	this._autoBezier = false;
	this._roving = false;
}

/**
* Constructs a new KeyFrame
* @class KeyFrame
* @classdesc Properties of an After Effects Keyframe, as returned by {@linkcode DuAEF.DuAE.Property.getKeyFrames} or {@linkcode DuAEF.DuAE.Property.getKeyFrameAtIndex} or {@linkcode DuAEF.DuAE.Property.getKeyFrameAtTime}.
* @property {float}	  [_time=0]     - The keyframe time
* @property {null|folat[]|float|MarkerValue|int|Shape|TextDocument}    [value=null]  -  The keyframe value
* @property {KeyframeInterpolationType}   [_inInterpolationType=KeyframeInterpolationType.LINEAR]  - The incoming temporal interpolation type
* @property {KeyframeInterpolationType}	[_outInterpolationType=KeyframeInterpolationType.LINEAR]		- The outgoing temporal interpolation type
* @property {boolean}	[_spatial=false]	- true if this keyframe has a spatial value
* @property {KeySpatialProperties}	[spatialProperties=new KeySpatialProperties()]	- the spatial properties {@linkcode KeySpatialProperties} of this keyframe
* @property {KeyframeEase[]}	[inEase=null]	- The incoming temporal ease. The number of objects in the Array depends on the value type
* @property {KeyframeEase[]}	[outEase=null]	- The outgoing temporal ease. The number of objects in the Array depends on the value type
* @property {boolean}	[_continuous=false]	- true if the keyframe has temporal continuity
* @property {boolean}	[_autoBezier=false]	- true if the keyframe has temporal auto-Bezier interpolation
* @property {int}		[_index=0]	- The index of the keyFrame. Warning: not updated when another key frame is added on the property some time before this key._time!
*/
function KeyFrame(){
	this._time = 0;
	this.value = null;
	this._inInterpolationType = KeyframeInterpolationType.LINEAR;
	this._outInterpolationType = KeyframeInterpolationType.LINEAR;
	this._spatial = false;
	this.spatialProperties = new KeySpatialProperties();
	this.inEase = null;
	this.outEase = null;
	this._continuous = false;
	this._autoBezier = false;
	this._index = 0;
}

/**
* Constructs a new animation
* @class PropertyAnim
* @classdesc Describes the animation of an After Effects property
* @property {string}	  [_name=""]     - The property name
* @property {string}    [_matchName=""]  - The property matchName
* @property {KeyFrame[]}   [keys=[]]  - The keyframes of the animation
* @property {null|folat[]|float|MarkerValue|int|Shape|TextDocument}	[startValue=null]		- The value at the beginning of the animation
* @property {string}   [type="anim"]  - Read Only.
*/
function PropertyAnim(){
	this._name = "";
	this._matchName = "";
	this.keys = [];
	this.startValue = null;
	this.type = "anim";
}

/**
* Constructs a new group animation
* @class PropertyGroupAnim
* @classdesc Contains all PropertyAnim from an After Effects PropertyGroup
* @property {string}	  [_name=""]     - The property name
* @property {string}    [_matchName=""]  - The property matchName
* @property {PropertyAnim[]|PropertyGroupAnim[]}   [anims=[]]  - The animations in the group
* @property {string}   [type="group"]  - Read Only.
*/
function PropertyGroupAnim(){
	this._name = "";
	this._matchName = "";
	this.anims = [];
	this.type = "group";
}

/**
* Constructs a new layer animation
* @class LayerAnim
* @classdesc Contains all PropertyGroupAnim from an After Effects Layer
* @property {string}	  [_name=""]     - The property name
* @property {int}    [_index=""]  - The index of the layer
* @property {PropertyGroupAnim}   transform  - The transform animations
* @property {PropertyGroupAnim}	masks 	- The masks animations
* @property {PropertyGroupAnim}	effects	- The effects animations
* @todo add other propertygroups
*/
function LayerAnim(){
	this._name = "";
	this._index = 0;
	this.transform = new PropertyGroupAnim();
	this.transform._name = "Transform";
	this.transform._matchName = "ADBE Transform Group";
	this.masks = new PropertyGroupAnim();
	this.masks._name = "Masks";
	this.masks._matchName = "ADBE Mask Parade";
	this.effects = new PropertyGroupAnim();
	this.effects._name = "Effects";
	this.effects._matchName = "ADBE Effect Parade";
}

/**
* After Effects tools
* @namespace
* @memberof DuAEF
*/
DuAEF.DuAE = {};

/**
* Converts an After Effects collection to an array.
* @memberof DuAEF.DuAE
* @param {Collection|Array}	collection	- The Collection to convert. If an array is provided, a copy is returned.
* @return {Item[]|Layer[]|OutputModule[]|RenderQueueItem[]}	The values from the collection in an Array
*/
DuAEF.DuAE.convertCollectionToArray = function (collection)
{
	var arr = [];
	if (collection instanceof ItemCollection || collection instanceof LayerCollection || collection instanceof OMCollection || collection instanceof RQItemCollection)
	{
		for (var i = 1;i<=collection.length;i++)
		{
			arr.push(collection[i]);
		}
	}
	else
	{
		arr = collection;
	}
	return arr;
}

/**
* Application related methods
* @namespace
* @memberof DuAEF.DuAE
*/
DuAEF.DuAE.App = {};

//App Properties
(function ()
{
	//detect AE Version
	var reV = /^(\d+\.?\d*)/i;
	var v = app.version.match(reV);

	/**
	* The After Effects version
	* @memberof DuAEF.DuAE.App
	* @type {float}
	*/
	DuAEF.DuAE.App.version = parseFloat(v[1]);

	/**
	 * Has scripting file and network authorization
	 * @type {boolean}
	 */
	DuAEF.DuAE.App.hasFilesAndNetworkAccess = app.preferences.getPrefAsLong("Main Pref Section","Pref_SCRIPTING_FILE_NETWORK_SECURITY") == 1;
})();

/**
* Asks the user to check the file and network security pref if not already set.
* Opens the general prefrences of After Effects.
* @memberof DuAEF.DuAE.App
* @param {boolean}	[showAlert=true]	- Wether to display an alert before opening the preferences
* @param {string}	[message=The Duduf After Effects scripting framework needs to be allowed to write files\nPlease, check the box called 'Allow Scripts to write files...' in the general preferences of After Effects.]	- The message to display in the alert.
* @return {boolean}	Wether the preference has been set
*/
DuAEF.DuAE.App.askFilesAndNetworkAccess = function(showAlert,message)
{
	if (showAlert === undefined) alert = true;
	if (message === undefined ) message = "The Duduf After Effects scripting framework needs to be allowed to write files\nPlease, check the box called 'Allow Scripts to write files...' in the general preferences of After Effects.";
	if (!DuAEF.DuAE.App.hasFilesAndNetworkAccess)
	{

		if (showAlert) alert(message);
		app.executeCommand(2359);

		DuAEF.DuAE.App.hasFilesAndNetworkAccess = app.preferences.getPrefAsLong("Main Pref Section","Pref_SCRIPTING_FILE_NETWORK_SECURITY") == 1;
		return DuAEF.DuAE.App.hasFilesAndNetworkAccess;
	}
}

/**
* Gets the public name of a version of After Effects (like CC2015.3 for version 13.8)
* @param {float}	[versionAsFloat]	- The version as a float. If not provided, will default to the current version of the running instance of After Effects.
* @return {string}	The version name.
*/
DuAEF.DuAE.App.getAEVersionName = function(versionAsFloat)
{
	if (versionAsFloat === undefined) versionAsFloat = DuAEF.DuAE.App.version;
	if (versionAsFloat < 8) return "" + versionAsFloat;
	if (versionAsFloat >= 8 && versionAsFloat < 9) return "CS3";
	if (versionAsFloat >= 9 && versionAsFloat < 10) return "CS4";
	if (versionAsFloat >= 10 && versionAsFloat < 10.5) return "CS5";
	if (versionAsFloat >= 10.5 && versionAsFloat < 11) return "CS5.5";
	if (versionAsFloat >= 11 && versionAsFloat < 12) return "CS6";
	if (versionAsFloat >= 12 && versionAsFloat < 13) return "CC";
	if (versionAsFloat >= 13 && versionAsFloat < 13.1) return "CC2014";
	if (versionAsFloat >= 13.1 && versionAsFloat < 13.2) return "CC2014.1";
	if (versionAsFloat >= 13.2 && versionAsFloat < 13.5) return "CC2014.2";
	if (versionAsFloat >= 13.5 && versionAsFloat < 13.6) return "CC2015";
	if (versionAsFloat >= 13.6 && versionAsFloat < 13.7) return "CC2015.1";
	if (versionAsFloat >= 13.7 && versionAsFloat < 13.8) return "CC2015.2";
	if (versionAsFloat >= 13.8 && versionAsFloat < 14) return "CC2015.3";
	if (versionAsFloat >= 14 && versionAsFloat < 15) return "CC2017";
	if (versionAsFloat >= 15 && versionAsFloat < 16) return "CC2018";
	else return "Unknown";
}

/**
* After Effects project methods
* @namespace
* @memberof DuAEF.DuAE
*/
DuAEF.DuAE.Project = {};

/**
* Gets the After Effects current composition
* @return {CompItem|null} The current composition or null if there's no current comp
*/
DuAEF.DuAE.Project.getActiveComp = function()
{
	var comp = app.project.activeItem;
	if (!comp) return null;
	if (!(comp instanceof CompItem)) return null;
	return comp;
}

/**
* After Effects composition methods
* @namespace
* @memberof DuAEF.DuAE
*/
DuAEF.DuAE.Comp = {};

/**
* Gets the After Effects selected properties in the current comp
* @param {PropertyType|PropertyValueType|string|function}	 [filter]	- A filter to get only a certain type, or value type, or property name or matchName.<br />
* A function which take one PropertyBase as argument can be used to filter the properties: the Property will be returned if the function returns true.
* @param {boolean}	[strict=false]	- If a string filter is provided, wether to search for the exact name/matchName or if it contains the filter.
* @param {boolean}	[caseSensitive=true]	- If a string filter is provided, and not strict is false, does the search have to be case sensitive?
* @return {PropertyBase[]} The selected properties, an empty Array if nothing active or selected
*/
DuAEF.DuAE.Comp.getSelectedProps = function(filter,strict,caseSensitive)
{
	var props = [];
	var comp = DuAEF.DuAE.Project.getActiveComp();
	if (!comp) return props;

	//if no filter, get all using AE native API
	if (filter === undefined)
	{
		return comp.selectedProperties;
	}

	var layers = comp.selectedLayers;
	if (layers.length === 0) return props;

	for (var i = 0 ; i < layers.length ; i++)
	{
		props = props.concat(DuAEF.DuAE.Layer.getSelectedProps(layers[i],filter,strict,caseSensitive));
	}
	return props;
}

/**
* Deselects all properties in the current composition
*/
DuAEF.DuAE.Comp.unselectProperties = function()
{
	var props = DuAEF.DuAE.Comp.getSelectedProps();
	for (var i = 0; i < props.length ; i++)
	{
		props[i].selected = false;
	}
}

/**
* After Effects layer methods
* @namespace
* @memberof DuAEF.DuAE
*/
DuAEF.DuAE.Layer = {};

/**
* Gets the After Effects selected properties in the layer
* @param {Layer}	layer	- The layer
* @param {PropertyType|PropertyValueType|string|function}	 [filter]	- A filter to get only a certain type, or value type, or property name or matchName.<br />
* A function which take one PropertyBase as argument can be used to filter the properties: the Property will be returned if the function returns true.
* @param {boolean}	[strict=false]	- If a string filter is provided, wether to search for the exact name/matchName or if it contains the filter.
* @param {boolean}	[caseSensitive=true]	- If a string filter is provided, and not strict is false, does the search have to be case sensitive?
* @return {PropertyBase[]} The selected properties, an empty Array if nothing active or selected
*/
DuAEF.DuAE.Layer.getSelectedProps = function(layer,filter,strict,caseSensitive)
{
	if (strict === undefined) strict = false;
	if (caseSensitive === undefined) caseSensitive = true;

	var props = [];

	if (!caseSensitive && typeof filter === "string") filter = filter.toLowerCase();

	var selectedProps = layer.selectedProperties;
	if (filter === undefined)
	{
		props = props.concat(selectedProps);
	}
	else
	{
		for (var j = 0 ; j < selectedProps.length ; j++)
		{
			var prop = selectedProps[j];

			var name = prop.name;
			var matchName = prop.matchName;
			if (!caseSensitive)
			{
				name = name.toLowerCase();
				matchName = matchName.toLowerCase();
			}

			if (strict && name === filter) props.push(prop);
			else if (strict && matchName === filter) props.push(prop);
			else if (typeof filter === "string")
			{
				if (name.indexOf(filter) >= 0) props.push(prop);
				else if (matchName.indexOf(filter) >= 0) props.push(prop);
			}
			else if (prop.propertyType == PropertyType.PROPERTY) if (prop.propertyValueType == filter) props.push(prop);
			else if (prop.propertyType == filter) props.push(prop);
			else if (typeof filter === "function") if (filter(prop)) props.push(prop);
		}
	}

	return props;
}

/**
* Gets all animations on the layer in the whole timeline or in the time range<br />
* The first KeyFrame._time will be adjusted relatively to the start of the time range (if provided) instead of the startTime of the composition.
* @param {Layer}	prop	- The layer.
* @param {boolean}	[selected=false]	- true to get only selected keyframes.
* @param {float[]}	[timeRange=[0,23000]]	- The time range, an array of two time values, in seconds.
* @return {LayerAnim}	The animations. A PropertyAnim if prop is a Property, a PopertyGroupAnim if it is a PropertyGroup
* @todo implement!
*/
DuAEF.DuAE.Layer.getAnim = function (layer,selected,timeRange)
{
	var anim = new LayerAnim();
	anim.name = layer.name;
	anim.index = layer.index;
	anim.transform = DuAEF.DuAE.Property.getPropertyGroupAnim(layer.property("ADBE Transform Group"));
	anim.masks = DuAEF.DuAE.Property.getPropertyGroupAnim(layer.property("ADBE Mask Parade"));
	anim.effects = DuAEF.DuAE.Property.getPropertyGroupAnim(layer.property("ADBE Effect Parade"));
}

/**
* After Effects properties methods
* @namespace
* @memberof DuAEF.DuAE
*/
DuAEF.DuAE.Property = {};

/**
* Gets the layer containing the property
* @param {Property}	prop	- The After Effects Property
* @return {Layer}	The layer
*/
DuAEF.DuAE.Property.getPropertyLayer = function (prop)
{
	if (prop === undefined) throw "You must provide a property.";
	var parentProp = prop;
	while (parentProp.parentProperty !== null)
	{
		// Traverse up the property tree
		parentProp = parentProp.parentProperty;
	}
	return parentProp;
}

/**
* Gets the composition containing the property
* @param {Property}	prop	- The After Effects Property
* @return {CompItem}	The composition
*/
DuAEF.DuAE.Property.getPropertyComp = function (prop)
{
	var layer = DuAEF.DuAE.Property.getPropertyLayer(prop);
	return layer.containingComp;
}

/**
* Gets the key at a given index on a property
* @param {Property}	prop	- The property.
* @param {int}	keyIndex	- The index of the key to retrieve. If the index is negative, it is counted from the end i.e. to retrieve the keyframe before the last one, use -2 (-1 is the last)
* @return {KeyFrame}	The keyframe, or null if incorrect index
*/
DuAEF.DuAE.Property.getKeyFrameAtIndex = function (prop,keyIndex)
{
	if (Math.abs(keyIndex) > prop.numKeys || keyIndex == 0)
	{
		return null;
	}
	if (keyIndex < 0)
	{
		keyIndex = prop.numKeys - keyIndex + 1;
	}

	var key = new KeyFrame();
	key._time = prop.keyTime(keyIndex);
	key.value = prop.keyValue(keyIndex);
	key._inInterpolationType = prop.keyInInterpolationType(keyIndex);
	key._outInterpolationType = prop.keyOutInterpolationType(keyIndex);
	if ( prop.propertyValueType == PropertyValueType.ThreeD_SPATIAL || prop.propertyValueType == PropertyValueType.TwoD_SPATIAL )
	{
		key._spatial = true;
		key.spatialProperties.inTangent = prop.keyInSpatialTangent(keyIndex);
		key.spatialProperties.outTangent  = prop.keyOutSpatialTangent(keyIndex);
		key.spatialProperties._continuous = prop.keySpatialContinuous(keyIndex);
		key.spatialProperties._autoBezier = prop.keySpatialAutoBezier(keyIndex);
		key.spatialProperties._roving = prop.keyRoving(keyIndex);
	}
	key.inEase = prop.keyInTemporalEase(keyIndex);
	key.outEase = prop.keyOutTemporalEase(keyIndex);
	key._continuous = prop.keyTemporalContinuous(keyIndex);
	key._autoBezier = prop.keyTemporalAutoBezier(keyIndex);
	key._index = keyIndex;

	return key;
}

/**
* Gets the nearest key at a given time on a property
* @param {Property}	prop	- The property.
* @param {float}	time	- The time of the key to retrieve.
* @return {KeyFrame}	The keyframe, or null if incorrect time or not found
*/
DuAEF.DuAE.Property.getNearestKeyFrameAtTime = function (prop,time)
{
	return DuAEF.DuAE.Property.getKeyFrameAtIndex(prop.nearestKeyIndex(time));
}

/**
* Gets the key at an exactly given time on a property
* @param {Property}	prop	- The property.
* @param {float}	time	- The time of the key to retrieve.
* @return {KeyFrame}	The keyframe, or null if incorrect time
*/
DuAEF.DuAE.Property.getKeyFrameAtTime = function (prop,time)
{
	if (!prop.canVaryOverTime) return null;
	if (prop.numKeys == 0) return null;
	var key = DuAEF.DuAE.Property.getKeyFrameAtIndex(prop,prop.nearestKeyIndex(time));
	if (key === null) return key;
	if (key._time == time) return key;
	else return null;
}

/**
* Gets the property keyframes in the whole timeline or in the time range<br />
* The KeyFrame._time will be adjusted relatively to the start of the time range (if provided) instead of the startTime of the composition.
* @param {Property}	prop	- The property.
* @param {boolean}	[selected=false]	- true to get only selected keyframes.
* @param {float[]}	[timeRange=[0,23000]]	- The time range, an array of two time values, in seconds.
* @return {KeyFrame[]}	The keyframes, or null of this property is of type PropertyValueType.NO_VALUE or PropertyValueType.CUSTOM_VALUE
*/
DuAEF.DuAE.Property.getKeyFrames = function(prop,selected,timeRange)
{
	if (prop.propertyValueType == PropertyValueType.NO_VALUE) return null;
	if (prop.propertyValueType == PropertyValueType.CUSTOM_VALUE) return null;

	if (timeRange === undefined) timeRange = [0,23000];
	if (selected === undefined) selected = false;

	var keyFrames = [];

	if (prop.elided) return keyFrames;

	if (prop.isTimeVarying)
	{
		if (selected)
		{
			for (var keyIndex = 0; keyIndex < prop.selectedKeys.length ; keyIndex++)
			{
				var key = DuAEF.DuAE.Property.getKeyFrameAtIndex(prop,prop.selectedKeys[keyIndex]);
				if (key._time >= timeRange[0] && key._time <= timeRange[1])
				{
					key._time = key._time - timeRange[0];
					keyFrames.push(key);
				}
			}
		}
		else if (prop.numKeys > 0)
		{
			for (var keyIndex = 1; keyIndex <= prop.numKeys ; keyIndex++)
			{
				var key = DuAEF.DuAE.Property.getKeyFrameAtIndex(prop,keyIndex);
				if (key._time >= timeRange[0] && key._time <= timeRange[1])
				{
					key._time = key._time - timeRange[0];
					keyFrames.push(key);
				}
			}
		}
	}
	return keyFrames;
}

/**
* Gets the property animation in the whole timeline or in the time range<br />
* The first KeyFrame._time will be adjusted relatively to the start of the time range (if provided) instead of the startTime of the composition.
* @param {Property}	prop	- The property.
* @param {boolean}	[selected=false]	- true to get only selected keyframes.
* @param {float[]}	[timeRange=[0,23000]]	- The time range, an array of two time values, in seconds.
* @return {KeyFrame[]}	The keyframes, or null of this property is of type PropertyValueType.NO_VALUE or PropertyValueType.CUSTOM_VALUE
*/
DuAEF.DuAE.Property.getPropertyAnim = function (prop,selected,timeRange)
{
	if (prop.propertyValueType == PropertyValueType.NO_VALUE) return null;
	if (prop.propertyValueType == PropertyValueType.CUSTOM_VALUE) return null;

	if (timeRange === undefined) timeRange = [0,23000];

	var anim = new PropertyAnim();
	anim._name = prop.name;
	anim._matchName = prop.matchName;
	anim.startValue = prop.valueAtTime(timeRange[0],true);
	anim.keys = DuAEF.DuAE.Property.getKeyFrames(prop,selected,timeRange);
	return anim;
}

/**
* Gets all animations in the group in the whole timeline or in the time range<br />
* The first KeyFrame._time will be adjusted relatively to the start of the time range (if provided) instead of the startTime of the composition.
* @param {PropertyGroup}	prop	- The property.
* @param {boolean}	[selected=false]	- true to get only selected keyframes.
* @param {float[]}	[timeRange=[0,23000]]	- The time range, an array of two time values, in seconds.
* @return {PropertyGroupAnim|PropertyAnim}	The animations. A PropertyAnim if prop is a Property, a PopertyGroupAnim if it is a PropertyGroup
*/
DuAEF.DuAE.Property.getPropertyGroupAnim = function (prop,selected,timeRange)
{
	if (prop.propertyType === PropertyType.PROPERTY)
	{
		return DuAEF.DuAE.Property.getPropertyAnim(prop,selected,timeRange);
	}
	else if (prop.numProperties > 0)
	{
		var groupAnim = new PropertyGroupAnim();
		groupAnim._name = prop.name;
		groupAnim._matchName = prop.matchName;

		for (var propIndex = 1;propIndex <= prop.numProperties;propIndex++)
		{
			var anim = DuAEF.DuAE.Property.getPropertyGroupAnim(prop.property(propIndex),selected,timeRange);
			if (anim !== null) groupAnim.anims.push(anim);
		}

		return groupAnim;
	}
	return null;
}

/**
* Bezier Paths methods
* @namespace
* @memberof DuAEF.DuAE.Property
*/
DuAEF.DuAE.Property.Shape = {};

/**
* Makes a horizontal symetry transformation on the path.
* @param {Property}	pathProperty	- The After Effects Property containing the path to symetrize
*/
DuAEF.DuAE.Property.Shape.horizontalSymetry = function(pathProperty)
{
	if (pathProperty.propertyType !== PropertyType.PROPERTY) throw "Expected a shape property, got a group.";
	if (pathProperty.propertyValueType !== PropertyValueType.SHAPE) throw "Expected a shape property, got another type of value.";

	var shape = pathProperty.value;
	var vertices = shape.vertices;
	var inTangents = shape.inTangents;
	var outTangents = shape.outTangents;

	//get the horizontal center.
	var center = 0;
	for (var i = 0 ; i < vertices.length; i++)
	{
		center += vertices[i][0];
	}
	center = center / vertices.length;

	//twice the value for computing symetry
	center = center*2;

	//compute
	for (var i = 0 ; i < vertices.length; i++)
	{
		vertices[i][0] = center - vertices[i][0];
		inTangents[i][0] = -inTangents[i][0];
		outTangents[i][0] = -outTangents[i][0];
	}

	//set
	shape.vertices = vertices;
	shape.inTangents = inTangents;
	shape.outTangents = outTangents;
	if (pathProperty.numKeys > 0)
	{
		pathProperty.setValueAtTime(DuAEF.DuAE.Property.getPropertyComp(pathProperty).time,shape);
	}
	else
	{
		pathProperty.setValue(shape);
	}
}

/**
* Makes a horizontal symetry transformation on the paths, using the same axis of symetry for all shapes (shapes must be on the same layer).
* @param {Property[]}	pathProperties	- The After Effects Properties containing the paths to symetrize
*/
DuAEF.DuAE.Property.Shape.horizontalSymetries = function(pathProperties)
{
	var shapes = [];
	//get shapes and center
	var center = 0;
	var verticesCount = 0;
	for (var i = 0 ; i < pathProperties.length ; i++)
	{
		var shape = pathProperties[i].value;
		shapes.push(shape);
		for (var j = 0 ; j < shape.vertices.length; j++)
		{
			verticesCount++;
			center += shape.vertices[j][0];
		}
	}
	center = center / verticesCount;
	center = center *2;

	//compute
	for (var i = 0 ; i < shapes.length; i++)
	{
		var shape = shapes[i];
		var vertices = shape.vertices;
		var inTangents = shape.inTangents;
		var outTangents = shape.outTangents;
		for (var j = 0 ; j < shape.vertices.length ; j++)
		{
			vertices[j][0] = center - vertices[j][0];
			inTangents[j][0] = -inTangents[j][0];
			outTangents[j][0] = -outTangents[j][0];
		}
		shape.vertices = vertices;
		shape.inTangents = inTangents;
		shape.outTangents = outTangents;
		if (pathProperties[i].numKeys > 0)
		{
			pathProperties[i].setValueAtTime(DuAEF.DuAE.Property.getPropertyComp(pathProperties[i]).time,shape);
		}
		else
		{
			pathProperties[i].setValue(shape);
		}
	}
}

/**
* Makes a vertical symetry transformation on the path.
* @param {Property}	pathProperty	- The After Effects Property containing the path to symetrize
*/
DuAEF.DuAE.Property.Shape.verticalSymetry = function(pathProperty)
{
	if (pathProperty.propertyType !== PropertyType.PROPERTY) throw "Expected a shape property, got a group.";
	if (pathProperty.propertyValueType !== PropertyValueType.SHAPE) throw "Expected a shape property, got another type of value.";

	var shape = pathProperty.value;
	var vertices = shape.vertices;
	var inTangents = shape.inTangents;
	var outTangents = shape.outTangents;

	//get the horizontal center.
	var center = 0;
	for (var i = 0 ; i < vertices.length; i++)
	{
		center += vertices[i][1];
	}
	center = center / vertices.length;

	//twice the value for computing symetry
	center = center*2;

	//compute
	for (var i = 0 ; i < vertices.length; i++)
	{
		vertices[i][1] = center - vertices[i][1];
		inTangents[i][1] = -inTangents[i][1];
		outTangents[i][1] = -outTangents[i][1];
	}

	//set
	shape.vertices = vertices;
	shape.inTangents = inTangents;
	shape.outTangents = outTangents;
	if (pathProperty.numKeys > 0)
	{
		pathProperty.setValueAtTime(DuAEF.DuAE.Property.getPropertyComp(pathProperty).time,shape);
	}
	else
	{
		pathProperty.setValue(shape);
	}
}

/**
* Makes a vertical symetry transformation on the paths, using the same axis of symetry for all shapes (shapes must be on the same layer).
* @param {Property[]}	pathProperties	- The After Effects Properties containing the paths to symetrize
*/
DuAEF.DuAE.Property.Shape.verticalSymetries = function(pathProperties)
{
	var shapes = [];
	//get shapes and center
	var center = 0;
	var verticesCount = 0;
	for (var i = 0 ; i < pathProperties.length ; i++)
	{
		var shape = pathProperties[i].value;
		shapes.push(shape);
		for (var j = 0 ; j < shape.vertices.length; j++)
		{
			verticesCount++;
			center += shape.vertices[j][1];
		}
	}
	center = center / verticesCount;
	center = center *2;

	//compute
	for (var i = 0 ; i < shapes.length; i++)
	{
		var shape = shapes[i];
		var vertices = shape.vertices;
		var inTangents = shape.inTangents;
		var outTangents = shape.outTangents;
		for (var j = 0 ; j < shape.vertices.length ; j++)
		{
			vertices[j][1] = center - vertices[j][1];
			inTangents[j][1] = -inTangents[j][1];
			outTangents[j][1] = -outTangents[j][1];
		}
		shape.vertices = vertices;
		shape.inTangents = inTangents;
		shape.outTangents = outTangents;
		if (pathProperties[i].numKeys > 0)
		{
			pathProperties[i].setValueAtTime(DuAEF.DuAE.Property.getPropertyComp(pathProperties[i]).time,shape);
		}
		else
		{
			pathProperties[i].setValue(shape);
		}
	}
}
/*
	DuBinaryLib
  Library to create/extract json representations of binary files
	Copyright (c) 2017 Nicolas Dufresne, Rainbox Productions
	https://rainboxprod.coop

	_Contributors:_
		Nicolas Dufresne - Lead developer

	This file is part of DuAEF.

	DuAEF is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	DuAEF is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/

/**
* Tools to include and extract binary files directly in your script files, allowing to deploy only one .jsx files containing any needed image, preset or executable.
*
* You can easily convert binaries to text (*.jsxinc) files using the {@link https://github.com/Rainbox-dev/DuAEF/tree/master/tools|tools provided with DuAEF}. You can then include those *.jsxinc files inside your scripts, and use the {@link DuAEF.DuBinary.toFile|toFile()} method to extract and use them at runtime.
* @namespace
* @memberof DuAEF
* @example
* //First, include the text representation of the file (Add a # before the include word)
* include icon.png.jsxinc
* // Now, a variable called `icon` (the original file name without extension) is available, you can pass this object to the `DuBinary.toFile()` method to extract it and get an ExtendScript File object representation of it.
* // Note: This object is an instance of a `DuBinaryFile` class, which contains all information and a string representation of the original binary file
* var iconFile = DuBinary.toFile(icon);
* iconFile.fsName; // C:\users\duduf\appData\Roaming\DuAEF\icon.png (Example on Windows)
* //You can also directly use a PNG string in ScriptUI without extracting the file. (Add a # before the include word)
* var button = somePanel.add('iconbutton',undefined,icon.binAsString);
*/
DuAEF.DuBinary = {};

/**
 * Creates a file from a DuBinaryFile object representation
 * @memberof DuAEF.DuBinary
 * @param {DuBinaryFile}	duBinaryFile  	- The DuBinaryFile object containing the string representation
 * @param {string}			[outputFileName=Folder.userData/DuAEF/category/binaryfilename]	- The output filename.
 * @return {File} The file created
 * @example
 * //First, include the text representation of the file (Add a # before the include word)
 * include executable.exe.jsxinc
 * // Now, a variable called `executable` (the original file name without extension) is available, you can pass this object to the `DuBinary.toFile()` method to extract it and get an ExtendScript File object representation of it.
 * // Note: This object is an instance of a `DuBinaryFile` class, which contains all information and a string representation of the original binary file
 * var execFile = DuBinary.toFile(executable);
 * //Now, the file exists in the file system, and execFile is an ExtendScript File object.
 * // The `DuBinary.toFile()` method extracts the file to the Application Data folder by default.
 * execFile.fsName; // C:\users\duduf\appData\Roaming\DuAEF\icon.png (Example on Windows)
 * @example
 * //You can specify the output file name. (Add a # before the include word)
 * include preset.ffx.jsxinc
 * var presetFile = DuBinary.toFile(preset,"C:/test/test_preset.ffx");
 * presetFile.fsName; // C:\test\test_preset.exe");
 */
DuAEF.DuBinary.toFile = function(duBinaryFile,outputFileName)
{
	if (outputFileName === undefined) outputFileName = Folder.userData.absoluteURI + '/DuAEF/' + duBinaryFile.category + '/' + duBinaryFile.fileName;
	var file = new File(outputFileName);
	var fileContent = '';
	if (file.exists)
	{
		file.encoding = 'BINARY';
		if (file.open('r', 'TEXT', '????'))
		{
			fileContent = file.read();

			file.close();
		}
	}
	else
	{
		var folder = new Folder(file.path);
		if (!folder.exists)
		{
			folder.create();
		}
	}
	var success = fileContent == duBinaryFile.binAsString;
	if (!success)
	{
		file.encoding = 'BINARY';
		if (file.open('w'))
		{
			success = file.write(duBinaryFile.binAsString);
			file.close();
		}
	}
	return file;
}

/**
 * Creates a DuBinaryFile object from a binary file
 * @memberof DuAEF.DuBinary
 * @param {File}    file      - The File to convert
 * @param {string}  [category]  - A Category for the file, will be used as a subfolder to extract files. Can have subcategories like "category/subcategory".
 * @return {DuBinaryFile} The DuBinaryFile object containing the file as a string
 */
DuAEF.DuBinary.toObj = function(binaryFile,category)
{
  var content = '';

  binaryFile.encoding = "BINARY";
  if (binaryFile.open("r"))
  {
    content = binaryFile.read().toSource();
    content = content.substr(content.indexOf("\"")+1, content.length);
    content = content.substr(0, content.lastIndexOf("\""));
    binaryFile.close();
  }

  var obj = new DuBinaryFile(content,binaryFile.name,category);

  return obj;
}

/**
 * Converts a binary file to a jsxinc file
 * @memberof DuAEF.DuBinary
 * @param {File}    binaryFile      - The binary file to convert
 * @param {string}  [category]        - A Category for the file, will be used as a subfolder to extract files. Can have subcategories like "category/subcategory". Default: ""
 * @param {string}  [outputFileName=Same folder, same name with .json extension]  - The file name for the output.
 * @param {string}	[varName=File name without extension]	- The name of the variable used to store the javascript object.
 * @return {File} The json file created
 */
DuAEF.DuBinary.convertToIncludeFile = function(binaryFile,category,outputFileName,varName)
{
	if (outputFileName === undefined) outputFileName = binaryFile.absoluteURI + '.jsxinc';
	if (varName === undefined) varName = binaryFile.name.replace(/\..+/,'');
	varName = DuAEF.DuJS.String.replace(varName,'%20','_');
	var duBinary = this.toObj(binaryFile,category);
	var jsString = 'var ' + varName + ' = ';
	jsString += '{"binAsString":"' + duBinary.binAsString + '","fileName":"' + duBinary.fileName + '","category":"' + duBinary.category + '"}'
	jsString += ';\r\n';
	jsString += varName + ';\r\n';
	var outputFile = new File(outputFileName);
	outputFile.encoding = 'UTF8';
	if (outputFile.open("w", "TEXT", "????"))
	{
		outputFile.write(jsString);
		outputFile.close();
	}
}

/**
 * Converts a JS file to a binary file
 * @memberof DuAEF.DuBinary
 * @param {File}    jsFile        - The JS file to convert
 * @param {string}	[outputFileName=Folder.userData/DuAEF/category/binaryfilename]	- The output filename.
 * @return {File} The binary file created, or null if failed
 * @example
 * //If you don't want to include the file in the script. (Add a # before the include word)
 * var stringFile = new File("C:\test\image.jpg.jsxinc");
 * var jpgFile = DuBinary.convertToBinaryFile(stringFile);
 * // Warning, this method uses `$.eval()` which is a bad security issue.
 * //This will be changed in the future, but for now, do not use this method for anything else than debugging and testing.
 * @todo Do not use $.eval() but parse the file.
 */
DuAEF.DuBinary.convertToBinaryFile = function(jsFile,outputFileName)
{
	//TODO parse instead of eval
	var obj = $.eval(jsFile);
	return this.toFile(obj);
}

/**
 * Constructs a new string representation of a file
 * @class DuBinaryFile
 * @classdesc Represents a binary file as a string and a filename.
 * @param	{string}	binAsString			- The string representation.
 * @param	{string}	fileName			- The name of the original file.
 * @param	{string}	[category]			- A Category for the file, will be used as a subfolder to extract files. Can have subcategories like "category/subcategory".
 * @property {string}	binAsString	   - The string representation.
 * @property {string}	fileName  	   - The name of the original file
 * @property {string}	category       - A Category for the file, will be used as a subfolder to extract files. Can have subcategories like "category/subcategory".
 */
function DuBinaryFile(binAsString,fileName,category)
{
	this.binAsString = binAsString;
	fileName = DuAEF.DuJS.String.replace(fileName,'%20','_');
	this.fileName = fileName;
	if (category === undefined) category = '';
	this.category = category;
}
/*
	DuFFMpeg
	Copyright (c) 2017 Nicolas Dufresne, Rainbox Productions
	https://rainboxprod.coop

	_Contributors:_
		Nicolas Dufresne - Lead developer

	_DuFFMpeg makes use of:_

		• FFMpeg
		http://ffmpeg.org

	This file is part of DuFFMpeg.

	DuFFMpeg is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	DuFFMpeg is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with DuFFMpeg. If not, see <http://www.gnu.org/licenses/>.
*/

//TODO Use DuProcessLibs

/**
 * Constructs a new FFMpeg encoder.
 * The constructor will try to find the ffmpeg binary in the same folder as DuFFMpeg, or an (ffmpeg) subfolder, or in the scripts folder of After Effects.
 * If ffmpeg is not in one of those, the property ffmpegPath will be an empty string, and it has to be set by the user.
 * @class DuFFMpeg
 * @classdesc A class used to easily encode medias with ffmpeg
 * @param {string}	   [options=-stats]			- The options of the encoder.
 * @property {string}	  ffmpegPath		- The path to the FFMpeg binary.
 * @property {string}	   options			- The options of the encoder.
 * @property {FFMpegQueueItem[]} queue		- The render queue
 * @example
 * //Very simple transcoding
 * //create a new FFMpeg instance
 * var ffmpeg = new DuFFMpeg();
 * //input file. Note that you can use any path format you want, URI, fsName, or path, using either / or \
 * var input = new DuFFMpegInputModule('C:/RAINBOX/Test video 1.mp4');
 * //output to an audio wav file using PCM 32 bit float little-endian codec
 * var output = new DuFFMpegOutputModule('pcm_f32le','C:/RAINBOX/Test audio 1.wav');
 * //create the render queue item
 * var item = new DuFFMpegQueueItem(input,[output]);
 * //add the item to the render queue
 * ffmpeg.queue.push(item);
 *
 * ffmpeg.launch(); //and launch the process!
 * @example
 * //Transcoding two different files, and a few more options
 * //new FFMpeg instance, encoding will overwrite files, and statistics will be shown
 * var ffmpeg = new DuFFMpeg('-y -stats');
 * //input file
 * var input = new DuFFMpegInputModule('C:/RAINBOX/Test video 1.mp4');
 * //output to an audio wav file using PCM 32 bit float little-endian codec, forcing 48000Hz sampling and disabling video
 * var output = new DuFFMpegOutputModule('pcm_f32le','C:/RAINBOX/Test audio 1.wav','-ar 48000 -vn');
 * //create the render queue item
 * var item = new DuFFMpegQueueItem(input,[output]);
 * //add the item to the render queue
 * ffmpeg.queue.push(item);
 *
 * //another render queue item
 * var input = new DuFFMpegInputModule('C:/RAINBOX/Test video 2.mp4');
 * var output = new DuFFMpegOutputModule('pcm_f32le','C:/RAINBOX/Test audio 2.wav','-ar 48000 -vn');
 * var item = new DuFFMpegQueueItem(input,[output]);
 * ffmpeg.queue.push(item);
 *
 * //and launch the process! Both items will be transcoded.
 * ffmpeg.launch();
 */
function DuFFMpeg(options)
{
	//detect os
	var mac = $.os.toLowerCase().indexOf("mac") >= 0;
	this.mac = mac;
	this.win = !mac;

	if (options == undefined) options = '-stats';

	this.ffmpegPath = '';

	//try to detect the ffmpeg path
	var ffmpegBinName = '';
	if (this.win) ffmpegBinName = 'ffmpeg.exe';
	else ffmpegBinName = 'ffmpeg';
	//first, in the same dir
	var ffmpegFile = new File($.fileName.substring(0,$.fileName.lastIndexOf('/')) + '/' + ffmpegBinName);
	//in an (ffmpeg) subfolder
	if (!ffmpegFile.exists)
	{
		ffmpegFile = new File($.fileName.substring(0,$.fileName.lastIndexOf('/')) + '/(ffmpeg)/' + ffmpegBinName);
	}
	//in AE Scripts folder
	if (!ffmpegFile.exists)
	{
		ffmpegFile = new File(Folder.appPackage.absoluteURI + '/Scripts/' + ffmpegBinName);
	}
	//in AE Scripts/(ffmpeg) folder
	if (!ffmpegFile.exists)
	{
		ffmpegFile = new File(Folder.appPackage.absoluteURI + '/Scripts/(ffmpeg)/' + ffmpegBinName);
	}
	//in AE ScriptUI Panels
	if (!ffmpegFile.exists)
	{
		ffmpegFile = new File(Folder.appPackage.absoluteURI + '/Scripts/ScriptUI Panels/' + ffmpegBinName);
	}
	//in AE ScriptUI Panels/(ffmpeg)
	if (!ffmpegFile.exists)
	{
		ffmpegFile = new File(Folder.appPackage.absoluteURI + '/Scripts/ScriptUI Panels/(ffmpeg)/' + ffmpegBinName);
	}

	if (ffmpegFile.exists) this.ffmpegPath = ffmpegFile.fsName;

	this.options = options;
	this.queue = [];
}

/**
 * Launches encoding
 * @memberof DuFFMpeg
 * @return {string} The text returned by ffmpeg (currently works on win only, empty string on mac)
 */
DuFFMpeg.prototype.launch = function ()
{
	var cmd = '';
	if (this.win) cmd += '"' + this.ffmpegPath + '"';
	else
	{
	  var ffmpegFile = new File(this.ffmpegPath);
	  cmd += '"' + ffmpegFile.parent.fsName + '"/./' + ffmpegFile.name;
	}

	//add options
	cmd += ' ' + this.options;

	//add RenderItems
	for (var i = 0 ; i < this.queue.length ; i++)
	{
		var item = this.queue[i];
		cmd += ' ' + item.input.options;
		cmd += ' -i "' + item.input.inputPath + '"';
		//add outputs
		for (var j = 0 ; j < item.outputs.length ; j++)
		{
			var output = item.outputs[j];
			cmd += ' -c ' + output.codec;
			cmd += ' ' + output.options;
			cmd += ' "' + output.outputPath + '"';
		}
	}

	//launch!

	// mac hack, do not wait for ffmpeg as it freezes AE
	if (this.mac) cmd = cmd + ' &';

	system.callSystem(cmd);

	// mac hack, but let's wait anyway
	if (this.mac)
	{
	  //timeout
	  var currentDate = new Date();
	  var timeout = currentDate.getTime() + 30000;
	  var checkTime = new Date();

	  var cmd = 'ps -A | grep "[f]fmpeg"';

	  //wait
	  while(checkTime.getTime() < timeout)
	  {
			var test = system.callSystem(cmd);
			if (test == '') break;
			$.sleep(300);
			checkTime = new Date();
	  }
	}
}

/**
 * Constructs a new FFMpegInputModule module
 * @class DuFFMpegInputModule
 * @classdesc A class used to easily encode medias with ffmpeg
 * @param {string}	inputPath		- The path to the input file.
 * @param {string}	[options]			- The options for the input file.
 * @property {string}	inputPath		- The path to the input file.
 * @property {string}	options			- The options for the input file. Default: ''
 */
function DuFFMpegInputModule(inputPath,options)
{
	if (!inputPath) throw "No input file set";
	if (inputPath == '') throw "No input file set";
	var inputFile = new File(inputPath);
	if (!inputFile.exists) throw "The input file does not exist";

	this.inputPath = inputFile.fsName;

	if (!options) options = '';
	this.options = options;
}

/**
 * Constructs a new FFMpegOutputModule module
 * @class DuFFMpegOutputModule
 * @classdesc A class used to easily encode medias with ffmpeg
 * @param {string}	codec			- The codec used for transcoding.
 * @param {string}	outputPath		- The path to the output file.
 * @param {string}	[options]			- The options for the output file (other than setting the codec).
 * @property {string}	codec			- The codec used for transcoding.
 * @property {string}	outputPath		- The path to the output file.
 * @property {string}	options			- The options for the output file (other than setting the codec).
 */
function DuFFMpegOutputModule(codec,outputPath,options)
{
	if (!codec) throw "No codec set";
	if (codec == '') throw "No codec set";

	this.codec = codec;

	//f (!outputPath) throw "No output file set";
	//if (outputPath == '') throw "No output file set";

	var outputFile = new File(outputPath);
	this.outputPath = outputFile.fsName;

	if (!options) options = '';
	this.options = options;
}

/**
 * Constructs a new FFMpegQueueItem
 * @class DuFFMpegQueueItem
 * @classdesc A class used to easily encode medias with ffmpeg
 * @param {FFMpegInputModule}		input	  - The input module.
 * @param {FFMpegOutputModule[]}	outputs	   - The output modules
 * @property {FFMpegInputModule}	input	  - The input module.
 * @property {FFMpegOutputModule[]}	outputs	   - The output modules
 */
function DuFFMpegQueueItem(input,outputs)
{
	if (!input) throw "No input set";

	this.input = input;

	if (!outputs) throw "No output set";
	if (outputs.length < 1) throw "Empty outputs";

	this.outputs = outputs;
}
/*
DuJSLib
Library javascript tools
Copyright (c) 2017 Nicolas Dufresne, Rainbox Productions
https://rainboxprod.coop

_Contributors:_
Nicolas Dufresne - Lead developer

This file is part of DuAEF.

DuAEF is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

DuAEF is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/

/**
* Useful JavaScript tools
* @namespace
* @memberof DuAEF
*/
DuAEF.DuJS = {};

/**
* JavaScript Array related methods
* @namespace
* @memberof DuAEF.DuJS
*/
DuAEF.DuJS.Array = {};

/**
* Gets the first index of a value in an Array, or -1 if not found
* @memberof DuAEF.DuJS.Array
* @param {Array}	arr	- The array
* @param {*}	value	- The value to find. Must be compatible with the == operand
* @return {int}	The index of value, -1 if not found
*/
DuAEF.DuJS.Array.indexOf = function (arr,value)
{
	if (value == undefined) throw "Value can not be undefined";

	for (var i = 0;i<arr.length;i++)
	{
	if (arr[i] == value) return i;
	}
	return -1;
}

/**
* Checks if the array has duplicate values
* @memberof DuAEF.DuJS.Array
* @param {Array}	arr	- The array
* @return {boolean}	true if the array has duplicate values
*/
DuAEF.DuJS.Array.hasDuplicates = function (arr)
{
	for (var i = 0;i<arr.length-1;i++) {
	for (var j=i+1;j<arr.length;j++) {
	if (arr[i] === arr[j]) return true;
	}
	}
	return false;
}

/**
* Returns all duplicated values found in the array
* @memberof DuAEF.DuJS.Array
* @param {Array}	arr	- The array
* @return {Array}	The duplicated values
*/
DuAEF.DuJS.Array.getDuplicates = function (arr)
{
	var duplicates = [];
	for (var i = 0;i<arr.length-1;i++) {
	for (var j=i+1;j<arr.length;j++) {
	if (arr[i] === arr[j]) duplicates.push(arr[j]);
	}
	}
	DuAEF.DuJS.Array.removeDuplicates(duplicates);
	return duplicates;
}

/**
* Removes all duplicated values from the Array, and returns them
* @memberof DuAEF.DuJS.Array
* @param {Array}	arr	- The array
* @return {Array}	The duplicated (and removed) values
*/
DuAEF.DuJS.Array.removeDuplicates = function (arr)
{
	var removed = [];
	for (var i = 0;i<arr.length-1;i++) {
	for (var j=i+1;j<arr.length;j++) {
	if (arr[i] === arr[j]) {
	removed = removed.concat(arr.splice(j,1));
	}
	}
	}
	return removed;
}

/**
* JavaScript File System related methods
* @namespace
* @memberof DuAEF.DuJS
*/
DuAEF.DuJS.Fs = {};

/**
* Recursively gets all files in a folder using a name filter
* Returns an array of File objects.
* @memberof DuAEF.DuJS.Fs
* @param {Folder}	folder	- The Folder
* @param {string|function}	[filter=*]	- A search mask for file names, specified as a string or a function.
* A mask string can contain question mark (?) and asterisk (*) wild cards. Default is "*", which matches all file names.
* Can also be the name of a function that takes a File or Folder object as its argument. It is called for each file or folder found in the search; if it returns true, the object is added to the return array.
* @return {Array}	The files found.
*/
DuAEF.DuJS.Fs.getFilesInFolder = function (folder,filter)
{
	if (folder === undefined) return [];
	if (!(folder instanceof Folder)) return [];

	var files = folder.getFiles(filter);
	if (files === null) files = [];

	var folders = folder.getFiles(DuJS.fs.isFolder);

	for (var i = 0 ; i < folders.length ; i++)
	{
		files = files.concat(DuJS.fs.getFilesInFolder(folders[i],filter));
	}
	return files;
}

/**
* Checks if an object is a Folder
* @memberof DuAEF.DuJS.Fs
* @param {*}	file	- The object to check
* @return {boolean}	true if this object is an instance of Folder
*/
DuAEF.DuJS.Fs.isFolder = function (file)
{
	return file instanceof Folder;
}

/**
* JavaScript Math related methods
* @namespace
* @memberof DuAEF.DuJS
*/
DuAEF.DuJS.Math = {};

/**
* Generates a random integer between minimum and maximum
* @memberof DuAEF.DuJS.Math
* @param {int}	min	- The minimum value
* @param {int}	max	- The maximum value
* @return {int}	The randomly generated integer
*/
DuAEF.DuJS.Math.random = function (min, max)
{
	if (min == undefined) min = 0;
	if (max == undefined) max = 1;
	var rng = null;
	$.sleep(1);
	var date = new Date();
	var rng = new Math.seedrandom(date.getTime())();
	//rng = Math.random();

	if (!rng) return 0;
	return rng * (max - min) + min;
}

/**
* JavaScript Regular Expression related methods
* @namespace
* @memberof DuAEF.DuJS
*/
DuAEF.DuJS.RegExp = {};

/**
* Escape reg exp reserved characters from a string to build a regular expression compatible string
* @memberof DuAEF.DuJS.RegExp
* @param {string}	string		- The string to escape
* @return	{string}	The escaped string
*/
DuAEF.DuJS.RegExp.escapeRegExp = function (string)
{
	return string.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
}

/**
* JavaScript String related methods
* @namespace
* @memberof DuAEF.DuJS
*/
DuAEF.DuJS.String = {};

/**
* Replaces all occurences of a substring by another and returns the new string.
* @memberof DuAEF.DuJS.String
* @param {string}	string			- The original string
* @param {string}	find			- The substring to replace
* @param {string}	replace			- The new substring to insert
* @param {boolean}	[caseSensitive=true]	- Optionnal. Do a case sensitive search of substring.
* @return	{string}	The new string
*/
DuAEF.DuJS.String.replace = function (string, find, replace, caseSensitive)
{
	if (caseSensitive == undefined) caseSensitive = true;
	var re = new RegExp(DuAEF.DuJS.RegExp.escapeRegExp(find),caseSensitive ? 'g' : 'gi');
	return string.replace(re, replace);
}

/**
 * Checks if a string ends with a given suffix
 * @memberof DuAEF.DuJS.String
 * @param {string}	str 	The string to check
 * @param {string}	suffix	The suffix
 * @return {bool}	Wether the string ends with the given suffix or not
 */
DuAEF.DuJS.String.endsWith = function (str, suffix)
{
	return str.indexOf(suffix, str.length - suffix.length) !== -1;
}
/*
DuProcessLib
Library of tools to run command line tools and processes from After Effects scripts
Copyright (c) 2017 Nicolas Dufresne, Rainbox Productions
https://rainboxprod.coop

_Contributors:_
Nicolas Dufresne - Lead developer

This file is part of DuAEF.

DuAEF is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

DuAEF is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/

/**
* Constructs a new DuProcess instance
* @class DuProcess
* @classdesc A class to launch and manage processes, using the system command line.
* @param {string}	  processPath     - The path to the process executable binary
* @param {array}    [args]            - The common arguments used to run the process. You can append arguments each time you run the process with start(args)
* @param {int}      [timeout=0]         - Waiting timeout after process start, in ms, 0 to avoid waiting, -1 for infinite.
* If the process times out, process will not be killed, the script will just stop waiting.
* @property {string}	  processPath     - The path to the process executable binary
* @property {array}    args            - The common arguments used to run the process. You can append arguments each time you run the process with start(args)
* @property {int}      timeout         - Waiting timeout after process start, in ms, 0 to avoid waiting, -1 for infinite.
* If the process times out, process will not be killed, the script will just stop waiting. Default: 0
* @property {string[]}	queue			- An Array of arguments array.
Arrays of arguments in the queue will be processed one after each other.
Update the Array and launch the queue with startQueue()
* @property {string}	latestCommand	- The latest command which has been run.
*/
function DuProcess(processPath,args,timeout)
{
	if (processPath === undefined) processPath = "";
	this.processPath = processPath;
	if (args === undefined) args = [];
	this.args = args;
	if (timeout === undefined) timeout = 0;
	this.timeout = timeout;

	this.queue = [];

	this.latestCommand = '';
}

/**
* Starts the process
* @memberof DuProcess
* @param {Array}  args  - Args to append to DuProcess.args before starting
* @param {int}		[timeout] 	- Overrides the default timeout.
*/
DuProcess.prototype.start = function (args,timeout)
{
	if (timeout === undefined) timeout = this.timeout;

	var cmd = this.buildCmd(args);

	this.startCmd(cmd);
	this.latestCommand = cmd;
	this.waitForFinished(timeout);
}

/**
* Starts the queue
* @memberof DuProcess
* @param {int}		[timeout] 	- Overrides the default timeout.
*/
DuProcess.prototype.startQueue = function (timeout)
{
	if (timeout === undefined) timeout = this.timeout;

	var cmd = this.buildQueueCmd();

	this.startCmd(cmd);
	this.latestCommand = cmd;
	this.queue = [];

	this.waitForFinished(timeout);
}

/**
* Waits for the process to finish
* @memberof DuProcess
* @param {int}		[timeout] 	- Overrides the default timeout.
*/
DuProcess.prototype.waitForFinished = function (timeout)
{
	if (timeout === undefined) timeout = this.timeout;
	//wait
	var wait = true;
	var currentDate = new Date();
	var timeout = currentDate.getTime() + timeout;
	var checkTime = new Date();

	var checkCmd = '';
	var processName = new File(this.processPath).name;
	if (DuAEF.mac) checkCmd = 'ps -A | grep "' + processName + '"';
	if (DuAEF.win) checkCmd = 'tasklist /FO TABLE /NH /FI "Imagename eq ' + processName + '"';

	//wait
	while(wait)
	{
		var test = system.callSystem(checkCmd);
		if (test.indexOf(processName) < 0) break;
		$.sleep(100);
		checkTime = new Date();

		if (this.timeout >= 0)
		{
			wait = checkTime.getTime() < timeout;
		}
	}
}

/**
* Buidls and returns the command line
* @memberof DuProcess
* @param {string[]}  [args]  - Args to append to DuProcess.args before starting
* @return {string}	The command
*/
DuProcess.prototype.buildCmd = function (args)
{
	if (args === undefined) args = [];
	//build command
	//make sure to use fsName
	if(this.processPath.indexOf('/') >= 0 || this.processPath.indexOf('\\') >= 0)
	{
		var processFile = new File(this.processPath);
		this.processPath = processFile.fsName;
		if (this.processPath.indexOf(' ') > 0)
		{
			this.processPath = '"' + this.processPath + '"';
		}
	}
	var cmd = this.processPath;

	//args
	for (var a = 0 ; a < this.args.length ; a++)
	{
		var arg = this.args[a];
		if (arg.indexOf(' ') > 0)
		{
			arg = '"' + arg + '"';
		}
		cmd += ' ' + arg;
	}
	for (var b = 0 ; b < args.length ; b++)
	{
		var arg = args[b];
		if (arg.indexOf(' ') > 0)
		{
			arg = '"' + arg + '"';
		}
		cmd += ' ' + arg;
	}

	return cmd;
}

/**
* Builds and returns the command line to launch the current queue
* @memberof DuProcess
* @return {string}	The command
*/
DuProcess.prototype.buildQueueCmd = function ()
{
	var cmd = '';

	if (this.queue.length == 0)
	{
		return this.buildCmd();
	}

	for (var i = 0 ; i < this.queue.length ; i++)
	{
		if (i > 0)
		{
			if (DuAEF.mac) cmd += ' && ';
			if (DuAEF.win) cmd += '\r\n';
		}
		cmd += this.buildCmd(this.queue[i]);
	}
	return cmd;
}

/**
* Starts a command (in another thread).
* @memberof DuProcess
* @param {string}  cmd  - The command to start
*/
DuProcess.prototype.startCmd = function (cmd)
{
	//Start
	if (DuAEF.mac)
	{
		//add ' &' at the end to start detached
		cmd += ' &';
		system.callSystem(cmd);
	}
	if (DuAEF.win)
	{
		//create batch file
		var bat = new File(Folder.userData.absoluteURI + '/DuAEF/DuProcess.bat');
		bat.open('w');
		bat.write(cmd);
		bat.close();
		bat.execute();
	}
}

/**
* Constructs a queue of different processes
* @class DuProcessQueue
* @classdesc A class to launch several processes
* @param {DuProcess[]}	  [processes]     - The DuProcess Array
* @property {DuProcess[]}	  processes     - The DuProcess Array
*/
function DuProcessQueue(processes)
{
	if (processes === undefined) processes = [];
	this.processes = processes;
}

/**
* Starts the processes
* @memberof DuProcessQueue
*/
DuProcessQueue.prototype.start = function ()
{
	if(!this.processes.length) return;
	var cmd = '';
	for (var i = 0 ; i < this.processes.length ; i++)
	{
		var p = this.processes[i];
		if (i > 0)
		{
			if (DuAEF.mac) cmd += ' && ';
			if (DuAEF.win) cmd += '\r\n';
		}
		cmd += p.buildQueueCmd();
		p.queue = [];
	}
	this.processes[0].startCmd(cmd);
}
/*
DuQuantLib
Library to easily use a pngquant binary executable in After Effects
Copyright (c) 2017 Nicolas Dufresne, Rainbox Productions
https://rainboxprod.coop

_Contributors:_
Nicolas Dufresne - Lead developer

_DuQuant makes use of:_

• pngquant
https://pngquant.org/ licensed under BSD by Kornel Lesiński and contributors.

This file is part of DuAEF.

DuAEF is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

DuAEF is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/

/**
* Constructs a new PNGQuant instance
* The constructor will try to find the pngquant binary in the same folder as DuQuant, or a (pngquant) subfolder, or in the scripts folder of After Effects.
* If pngquant is not in one of those, the property pngquantPath will be an empty string, and it has to be set by the user.
* @class DuQuant
* @classdesc A class used to easily compress png files using pngquant
* @param {string}   [suffix=_DuQuant]          - The suffix added to compressed files. Using an empty string will overwrite input files.
* @param {int}		[quality=85]			- range 0 (worst) to 100 (perfect), similar to JPEG. pngquant will use the least amount of colors required to meet or exceed the quality.
* @param {string}	  [pngquantPath]		- The path to the pngquant binary. Will try to extract or auto find it if not set
* @property {string}	  pngquantPath		- The path to the pngquant binary. Will try to extract or auto find it if not set
* @property {string}   suffix          - The suffix added to compressed files. Using an empty string will overwrite input files.
* @property {int}			quality					- range 0 (worst) to 100 (perfect), similar to JPEG. pngquant will use the least amount of colors required to meet or exceed the quality.
* @property {File[]|Folder[]}		queue			- An Array of File or Folder objects to compress.
*/
function DuQuant(suffix,quality,pngquantPath)
{
	if (quality === undefined) this.quality = 85;
	else this.quality = quality;

	if (suffix === undefined) this.suffix = "_DuQuant";
	else this.suffix = suffix;

	this.pngquantPath = '';
	this.process = null;

	this.queue = [];
	this.folders = [];

	//find pngquant
	this.setPngquantPath(pngquantPath);
}

/**
* Launches compression on all files in a given folder
* @memberof DuQuant
* @param {string}  path  - The path to the folder containing files
*/
DuQuant.prototype.compressFolder = function (path)
{
	if (this.process === null) throw 'pngquant not found, cannot compress folder. You should set pngquant path with DuQuant.setPngquantPath()'
	var folder = new Folder(path);
	//get PNG files in folder
	var pngs = DuJS.fs.getFilesInFolder(folder,"*.png");
	if (pngs.length == 0) return;

	this.compress(pngs);
}

/**
* Launches compression on queue
* @memberof DuQuant
* @param {File[]|Folder[]}  [files=DuQuant.queue]  - The File or Folder objects to compress.
*/
DuQuant.prototype.compress = function (files)
{
	if (files === undefined) files = this.queue;
	else if (!files.length) files = this.queue;
	if (!files.length) return;

	var args = [];

	if (this.suffix != '')
	{
		args.push('--ext');
		args.push(this.suffix + '.png');
	}
	else
	{
		args.push('--ext=.png');
	}
	args.push('--quality');
	args.push('0-' + this.quality);

	for (var i = 0 ; i < files.length ; i++)
	{
		var file = files[i];
		//if folder, get qll files inside
		if (DuJS.fs.isFolder(file))
		{
			var filesInFolder = DuJS.fs.getFilesInFolder(file,"*.png");
			for (var j = 0 ; j < filesInFolder.length  ; j++)
			{
				this.process.queue.push(args.concat(filesInFolder[j].fsName));
			}
		}
		//if file, add it
		else
		{
			this.process.queue.push(args.concat(file.fsName));
		}
	}
	this.process.startQueue();
}

/**
* Sets the path to the pngquant binary executable
* @memberof DuQuant
* @param {pngquantPath}  [path]  - The path to the pngquant binary executable. If not provided, DuAEF will extract the binary if it has been included, or try to find it in common folders.
*/
DuQuant.prototype.setPngquantPath = function (pngquantPath)
{
	if (pngquantPath === undefined) pngquantPath = "";
	var pngquantFile = new File(pngquantPath);
	var pngquantBinName = '';
	if (DuAEF.win) pngquantBinName = 'pngquant.exe';
	else pngquantBinName = 'pngquant';
	//extract
	if(!pngquantFile.exists)
	{
		if (DuAEF.bin.pngquant != null)
		{
			pngquantFile = DuBinary.toFile(DuAEF.bin.pngquant);
		}
	}
	//first, in the same dir
	if (!pngquantFile.exists)
	{
		pngquantFile = new File($.fileName.substring(0,$.fileName.lastIndexOf('/')) + '/' + pngquantBinName);
	}
	//in an (ffmpeg) subfolder
	if (!pngquantFile.exists)
	{
		pngquantFile = new File($.fileName.substring(0,$.fileName.lastIndexOf('/')) + '/(pngquant)/' + pngquantBinName);
	}
	//in AE Scripts folder
	if (!pngquantFile.exists)
	{
		pngquantFile = new File(Folder.appPackage.absoluteURI + '/Scripts/' + pngquantBinName);
	}
	//in AE Scripts/(ffmpeg) folder
	if (!pngquantFile.exists)
	{
		pngquantFile = new File(Folder.appPackage.absoluteURI + '/Scripts/(pngquant)/' + pngquantBinName);
	}
	//in AE ScriptUI Panels
	if (!pngquantFile.exists)
	{
		pngquantFile = new File(Folder.appPackage.absoluteURI + '/Scripts/ScriptUI Panels/' + pngquantBinName);
	}
	//in AE ScriptUI Panels/(ffmpeg)
	if (!pngquantFile.exists)
	{
		pngquantFile = new File(Folder.appPackage.absoluteURI + '/Scripts/ScriptUI Panels/(pngquant)/' + pngquantBinName);
	}

	if (pngquantFile.exists)
	{
		this.pngquantPath = pngquantFile.fsName;
		//create process
		var timeout = 0;
		var commonArgs = ['--force','--skip-if-larger'];
		this.process = new DuProcess(this.pngquantPath,commonArgs,timeout);
	}
}
/*
DuRendererLib
Library to manage the After Effects Renderer/RenderQueue
Copyright (c) 2017 Nicolas Dufresne, Rainbox Productions
https://rainboxprod.coop

_Contributors:_
Nicolas Dufresne - Lead developer

This file is part of DuAEF.

DuAEF is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

DuAEF is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/

/**
* Constructs a new DuRenderer instance
* @class DuRenderer
* @classdesc A class used to easily manage After Effects Renderer/RenderQueue
* @param {string}             [defaultOutputTemplate]       - The default output module template name to use when adding comp to the queue. Empty string to let default AE OM defaultOutputTemplate.
* @param {PostRenderAction}   [defaultPostRenderAction=PostRenderAction.NONE]     - The default PostRenderAction.
* @param {boolean}				[pngquant=false]					- Compress PNG Sequences using pngquant after render.
* @property {string}             defaultOutputTemplate       - The default output module template name to use when adding comp to the queue. Empty string to let default AE OM defaultOutputTemplate.
* @property {PostRenderAction}   defaultPostRenderAction     - The default PostRenderAction.
* @property {boolean}				pngquant				- Compress PNG Sequences using pngquant after render.
* @property {DuRendererItem[]}              items            - The DuRendererItems in the queue
*/
function DuRenderer(defaultOutputTemplate,defaultPostRenderAction,pngquant)
{
	if (defaultOutputTemplate === undefined) defaultOutputTemplate = '';
	this.defaultOutputTemplate = defaultOutputTemplate;
	if (defaultPostRenderAction === undefined) defaultPostRenderAction = PostRenderAction.NONE;;
	this.defaultPostRenderAction = defaultPostRenderAction;
	if (pngquant === undefined) pngquant = false;
	this.pngquant = pngquant;

	//create pngquant process
	var suffix = '';
	this.pngquantProcess = new DuQuant(suffix);
	if (this.pngquantProcess.pngquantPath == '')
	{
		this.pngquant = false;
	}

	this.items = [];

	this.rqItemsEnabled = [];

	// get aerender
	var aerenderBinName = "aerender";
	if (DuAEF.win) aerenderBinName += ".exe";
	this.aerender = new DuProcess(Folder.appPackage.absoluteURI + "/" + aerenderBinName,['-continueOnMissingFootage']);

	//get pngquant-batch

	pngquantbatchFile = DuBinary.toFile(DuAEF.bin.pngquantbatch);
	this.pngquantbatch = new DuProcess(pngquantbatchFile.fsName,['--force','--skip-if-larger','--ext=.png','--quality','0-85','*.png']);
}

/**
* Adds a comp to the render queue
* @memberof DuRenderer
* @param {CompItem}          comp              - The Composition to add
* @param {string}            outputPath        - The output file path
* @param {string}            [outputTemplate]    - Overrides the default output module template
* @param {PostRenderAction}  [postRenderAction]  - Overrides the default PostRenderAction
*/
DuRenderer.prototype.addComp = function(comp,outputPath,outputTemplate,postRenderAction)
{
	if (outputTemplate === undefined) outputTemplate = this.defaultOutputTemplate;
	if (postRenderAction === undefined) postRenderAction = this.defaultPostRenderAction;
	var item = new DuRendererItem(comp,outputPath,outputTemplate,postRenderAction);
	this.items.push(item);
}

/**
* Adds a DuRendererItem to the After Effects renderQueue
* @memberof DuRenderer
* @param {DuRendererItem}          item              - The Item to add.
* @return {RenderQueueItem}		The item created.
*/
DuRenderer.prototype.addItemToAEQueue = function (item)
{
	//add comp to render queue
	var rqItem = app.project.renderQueue.items.add(item.comp);
	var outputModule = rqItem.outputModule(1);
	//set output format
	outputModule.applyTemplate(item.outputTemplate);

	//set output file
	var outputFile = new File(item.outputPath);
	outputModule.file = outputFile;
	//set post render action
	outputModule.postRenderAction = item.postRenderAction;
	return rqItem;
}

/**
* Renders a comp in background using aerender.exe
* Automatically manages the existing After Effects render queue to leave it untouched.
* The project will be saved.
* @memberof DuRenderer
* @param {CompItem}          comp              - The Composition to render
* @param {string}            outputPath        - The output file path
* @param {string}            [outputTemplate]    - Overrides Durenderer.defaultOutputTemplate
* @param {PostRenderAction}  [postRenderAction]  - Overrides DuRenderer.defaultPostRenderAction
* @property {bool}				[pngquant]		- Overrides DuRenderer.pngquant
*/
DuRenderer.prototype.backgroundRenderComp = function(comp,outputPath,outputTemplate,postRenderAction,pngquant)
{
	if (outputTemplate === undefined) outputTemplate = this.defaultOutputTemplate;
	if (postRenderAction === undefined) postRenderAction = this.defaultPostRenderAction;
	if (pngquant === undefined) pngquant = this.pngquant;

	//disable existing items
	this.disableRqItems();
	if (!app.project.file) app.project.save();
	//launch
	var rqItem = this.addItemToAEQueue(new DuRendererItem(comp,outputPath,outputTemplate,postRenderAction));
	app.project.save();
	var newProjectName = app.project.file.fsName.replace(/\.aep$/gi,"") + "_Durenderer.aep";
	//copy the project as a new file
	app.project.file.copy(newProjectName);

	//launch aerender.exe
	this.aerender.queue.push(['-project',newProjectName]);
	//pngquant
	if (pngquant)
	{
		var cdProcess = new DuProcess('cd',[rqItem.outputModule(1).file.parent.fsName]);
		//launch
		var queue = new DuProcessQueue([this.aerender,cdProcess,this.pngquantbatch]);
		queue.start();
	}
	else
	{
		this.aerender.startQueue();
	}

	rqItem.remove();
	this.enableRqItems();
	app.project.save();
}

/**
* Renders a comp in After Effects
* Automatically manages the existing After Effects render queue to leave it untouched.
* @memberof DuRenderer
* @param {CompItem}          comp              - The Composition to render
* @param {string}            outputPath        - The output file path
* @param {string}            [outputTemplate]    - Overrides Durenderer.defaultOutputTemplate
* @param {PostRenderAction}  [postRenderAction]  - Overrides DuRenderer.defaultPostRenderAction
* @property {bool}				[pngquant]		- Overrides DuRenderer.pngquant
*/
DuRenderer.prototype.renderComp = function(comp,outputPath,outputTemplate,postRenderAction,pngquant)
{
	if (outputTemplate === undefined) outputTemplate = this.defaultOutputTemplate;
	if (postRenderAction === undefined) postRenderAction = this.defaultPostRenderAction;
	if (pngquant === undefined) pngquant = this.pngquant;

	//disable existing items
	this.disableRqItems();

	//launch
	var rqItem = this.addItemToAEQueue(new DuRendererItem(comp,outputPath,outputTemplate,postRenderAction));
	app.project.renderQueue.render();

	//pngquant
	if (rqItem.file.name.toLowerCase().lastIndexOf(".png") == rqItem.file.name.length-4 && pngquant)
	{
		//go!
		this.pngquantProcess.compressFolder(rqItem.file.parent.fsName);
	}

	//remove item after render
	rqItem.remove();

	//enable existing items
	this.enableRqItems();

}

/**
* Renders the queue in background using aerender.exe
* Automatically manages the existing After Effects render queue to leave it untouched.
* The project will be saved.
* @memberof DuRenderer
*/
DuRenderer.prototype.backgroundRender = function()
{
	//disable existing items
	this.disableRqItems();
	if (!app.project.file) app.project.save();

	var rqItems = [];
	var postProcesses = [];
	for (var i = 0 ; i < this.items.length ; i++)
	{
		var item = this.items[i];
		//add comp to render queue
		var rqItem = this.addItemToAEQueue(item);
		//pngquant queue
		var outputFile = rqItem.outputModule(1).file;
		if (this.pngquant)
		{
			var cdProcess = new DuProcess('cd',[rqItem.outputModule(1).file.parent.fsName]);
			postProcesses.push(cdProcess);
			postProcesses.push(this.pngquantbatch);
		}
		rqItems.push(rqItem);
	}

	app.project.save();
	var newProjectName = app.project.file.fsName.replace(/\.aep$/gi,"") + "_Durenderer.aep";
	//copy the project as a new file
	app.project.file.copy(newProjectName);
	this.aerender.queue.push(['-project',newProjectName]);

	if (this.pngquant)
	{
		var queueProcesses = [this.aerender];
		var queue = new DuProcessQueue(queueProcesses.concat(postProcesses));
		queue.start();
	}
	else
	{
		this.aerender.startQueue();
	}

	this.items = [];

	//remove items
	for (var i = rqItems.length -1 ; i>=0  ; i--)
	{
		rqItems[i].remove();
	}

	//enable existing items
	this.enableRqItems();
	app.project.save();
}

/**
* Renders the queue in After Effects
* Automatically manages the existing After Effects render queue to leave it untouched.
* @memberof DuRenderer
*/
DuRenderer.prototype.render = function()
{
	//disable existing items
	this.disableRqItems();
	var rqItems = [];
	for (var i = 0 ; i < this.items.length ; i++)
	{
		var item = this.items[i];
		//add comp to render queue
		var rqItem = this.addItemToAEQueue(item);
		//pngquant queue
		var outputFile = rqItem.outputModule(1).file;
		if (outputFile.name.toLowerCase().lastIndexOf(".png") == outputFile.name.length-4 && this.pngquant)
		{
			//go!
			this.pngquantProcess.queue.push(outputFile.parent);
		}
		rqItems.push(rqItem);
	}
	//render
	app.project.renderQueue.render();
	this.pngquantProcess.compress();

	this.items = [];

	//remove items
	for (var i = rqItems.length -1 ; i>=0  ; i--)
	{
		rqItems[i].remove();
	}

	//enable existing items
	this.enableRqItems();
}

/**
* Disables all previously added Items in the AE renderQueue
* You can re-enable them using DuRenderer.enableRqItems()
*/
DuRenderer.prototype.disableRqItems = function()
{
	for (var i = 1 ; i <= app.project.renderQueue.numItems ; i++)
	{
		var item = app.project.renderQueue.items[i];
		if (item.render) this.rqItemsEnabled.push(i);
		if(item.status != RQItemStatus.RENDERING && item.status != RQItemStatus.DONE &&  item.status != RQItemStatus.WILL_CONTINUE) item.render = false;
	}
}

/**
* Enables all previously added Items in the AE renderQueue, if they were previously disabled by DuRenderer.disableRqItems()
*/
DuRenderer.prototype.enableRqItems = function ()
{
	//re-enable render queue
	for (var i = 0 ; i < this.rqItemsEnabled ; i++)
	{
		var item = app.project.renderQueue.items[this.rqItemsEnabled[i]];
		item.render = true;
	}
}

/**
* Constructs a new item to render
* @class DuRendererItem
* @classdesc An item in the Durenderer queue
* @param {CompItem}			comp				- The composition to render
* @param {string}             [outputTemplate]       - The output module template name to use when adding comp to the queue. Empty string to let default AE OM defaultOutputTemplate.
* @param {PostRenderAction}   [postRenderAction]     - The PostRenderAction.
* @param {string}			outputPath			- The output file path.
* @property {CompItem}			comp				- The composition to render
* @property {string}             outputTemplate       - The output module template name to use when adding comp to the queue. Empty string to let default AE OM defaultOutputTemplate.
* @property {PostRenderAction}   postRenderAction     - The PostRenderAction.
* @property {string}			outputPath			- The output file path.
*/
function DuRendererItem(comp,outputPath,outputTemplate,postRenderAction)
{
	this.comp = comp;
	this.outputPath = outputPath;
	this.outputTemplate = outputTemplate;
	this.postRenderAction = postRenderAction;
}
/*
DuScriptUILib
Library with ScriptUI tools.
Copyright (c) 2017 Nicolas Dufresne, Rainbox Productions
https://rainboxprod.coop

_Contributors:_
Nicolas Dufresne - Lead developer

This file is part of DuAEF.

DuAEF is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

DuAEF is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/

/**
* ScriptUI tools
* @namespace
* @memberof DuAEF
*/
DuAEF.DuScriptUI = {};

//initilization
(function ()
{
	/**
	* The default alignment of children of containers with "column" orientation
	* @memberof DuAEF.DuScriptUI
	* @type {String[]}
	* @default ["fill","top"]
	*/
	DuAEF.DuScriptUI.defaultColumnAlignment = ["fill","top"];
	/**
	* The default alignment of children of containers with "row" orientation
	* @memberof DuAEF.DuScriptUI
	* @type {String[]}
	* @default ["left","center"]
	*/
	DuAEF.DuScriptUI.defaultRowAlignment = ["left","center"];
	/**
	* The default alignment of children of containers with "stack" orientation
	* @memberof DuAEF.DuScriptUI
	* @type {String[]}
	* @default ["fill","top"]
	*/
	DuAEF.DuScriptUI.defaultStackAlignment = ["fill","top"];
	/**
	* The default spacing of containers
	* @memberof DuAEF.DuScriptUI
	* @type {int}
	* @default 2
	*/
	DuAEF.DuScriptUI.defaultSpacing = 2;
	/**
	* The default mqrgins of containers
	* @memberof DuAEF.DuScriptUI
	* @type {int}
	* @default 2
	*/
	DuAEF.DuScriptUI.defaultMargins = 2;
})();

/**
 * Changes the color of the text of a ScriptUI Object
 * @memberof DuAEF.DuScriptUI
 * @param {ScriptUI}		text	- The ScriptUI Object
 * @param {Array}				color	- The new color [R,V,B,A] Array
 */
DuAEF.DuScriptUI.setTextColor = function (text,color)
{
	if (!text) throw "You must provide a ScriptUI Control to change the color of the text";
	var g = text.graphics;
	var textPen = g.newPen(g.PenType.SOLID_COLOR,color,1);
	g.foregroundColor = textPen;
}

/**
 * Creates the main panel of a script
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|null}		container	- The container ('this' in the root of the calling script), either a Panel (when launched from the 'Window' menu) or null (when launched from 'file/scripts/run...')
 * @return {Panel|Window}	The panel created, either a ScriptUI Panel or a ScriptUI Window
 */
DuAEF.DuScriptUI.createUI = function (container, scriptName)
{
	if (!scriptName) scriptName = '';

	var  myPal = null;
	container instanceof Panel ? myPal = container : myPal = new Window('palette',scriptName,undefined, {resizeable:true});

	if (myPal == null) throw "Failed to create User Interface.";

	// Margins and alignment
	myPal.margins = DuAEF.DuScriptUI.defaultMargins;
	myPal.spacing = DuAEF.DuScriptUI.defaultSpacing;
	myPal.alignChildren = DuAEF.DuScriptUI.defaultColumnAlignment;
	myPal.orientation = "column";

	return myPal;
}

/**
 * Resizes and shows the main panel of a script
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window}		ui	- The UI created by Duik.ui.createUI
 */
DuAEF.DuScriptUI.showUI = function (ui)
{
	ui.layout.layout(true);
	ui.layout.resize();
	ui.onResizing = ui.onResize = function () {this.layout.resize();}

	// If it's a Window, it needs to be shown
	if (ui instanceof Window) {
		//ui.center();
		ui.show();
	}
}

/**
 * Adds a group in a container, using  DuAEF.DuScriptUI default alignments, and DuAEF.DuScriptUI.defaultSpacing. Margins are set to 0.
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window|Group}		container	- Where to create the group
 * @param {string}					[orientation] - The orientation to use. One of "column", "row" or "stack". By default, "column" if added in a row, "row" if added in a column.
 * @return {Group}	The group created
 */
DuAEF.DuScriptUI.addGroup = function (container,orientation)
{
	var group = container.add("group");
	group.spacing = 2;
	group.margins = 0;
	if (orientation !== undefined) group.orientation = orientation;
	if(group.orientation === "row")
	{
		group.alignChildren = DuAEF.DuScriptUI.defaultRowAlignment;
	}
	else if (group.orientation === "column")
	{
		group.alignChildren = DuAEF.DuScriptUI.defaultColumnAlignment;
	}
	else
	{
		group.alignChildren = DuAEF.DuScriptUI.defaultStackAlignment;
	}

	return group;
}
